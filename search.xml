<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>安装博客</title>
    <url>/archives/178db9e1.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a><strong>前言：</strong></h2><p>随着互联网浪潮的翻腾，国内外涌现出越来越多优秀的社交网站让用户分享信息更加便捷。然后，如果你是一个不甘寂寞的程序猿（媛），是否也想要搭建一个属于自己的个人网站，如果你曾经或者现在正有这样的想法，请跟随这篇文章发挥你的Geek精神，让你快速拥有自己的博客网站，写文章记录生活，享受这种从0到1的过程。</p>
<span id="more"></span>

<p><a href="https://www.zhihu.com/question/29755481">你见过的最棒的个人博客界面是什么样的？</a></p>
<h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo ?"></a><strong>什么是Hexo ?</strong></h2><p><img src="https://pic2.zhimg.com/v2-6890485c84748900d9dae824b7f7cbb1_r.jpg" alt="img"></p>
<p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。这里我们选用的是GitHub，你没看错，全球最大的同性恋交友网站（逃……）。Hexo同时也是GitHub上的开源项目，参见：<a href="https://github.com/hexojs/hexo">hexojs/hexo</a> 如果想要更加全面的了解Hexo，可以到其官网 <a href="https://hexo.io/">Hexo</a> 了解更多的细节，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。这里，默认各位猿/媛儿都知道GitHub就不再赘述。</p>
<p><strong>这是我的个人博客效果:</strong> <a href="http://iamwr.com/">吴润 · RunDouble</a></p>
<p>下面正式从零开始搭建年轻人的第一个网站。</p>
<h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a><strong>搭建步骤：</strong></h2><ul>
<li>获得个人网站域名</li>
<li>GitHub创建个人仓库</li>
<li>安装Git</li>
<li>安装Node.js</li>
<li>安装Hexo</li>
<li>推送网站</li>
<li>绑定域名</li>
<li>更换主题</li>
<li>初识MarkDown语法</li>
<li>发布文章</li>
<li>寻找图床</li>
<li>个性化设置</li>
<li>其他</li>
<li>附录</li>
</ul>
<p><strong>获得个人网站域名</strong></p>
<p>域名是网站的入口，也是网站的第一印象，比如饿了么的官网的域名是：<a href="https://www.ele.me/">https://www.ele.me/</a> ，很是巧妙。常见的有com,cn,net,org等后缀，也有小众的xyz,me,io等后缀，根据你自己的喜好，选择不同的后缀，比如我选择就是常见的com后缀。很多小众奇特的后缀在大陆是没办法备案的，网站也就无法上线。然而使用GitHub托管我们的网站，完全不需要备案，因为托管我们的网站内容的服务器在美国，而且在国内备案流程也比较繁杂，时间需要一周左右。</p>
<p>申请域名的地方有很多，这里推荐阿里云：<a href="https://www.aliyun.com/">阿里云-为了无法计算的价值</a> 申请入口：<a href="https://wanwang.aliyun.com/domain/">域名注册</a> 购买域名这也是我们整个搭建过程中惟一一个需要花钱的地方。如果你已经有了空闲域名就无需购买，直接使用即可。</p>
<p><strong>GitHub创建个人仓库</strong></p>
<p>登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：<a href="https://github.com/">Build software better, together</a> 点击GitHub中的New repository创建新仓库，仓库名应该为：<strong>用户名</strong>.<a href="http://github.io/">http://github.io</a> 这个<strong>用户名</strong>使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：</p>
<p><img src="https://pic4.zhimg.com/80/v2-832168e58b4ac4ce7c3cca797711d2d3_1440w.jpg" alt="img"></p>
<p><strong>安装Git</strong></p>
<p>什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，参看<a href="http://weibo.com/liaoxuefeng">廖雪峰</a>老师的Git教程：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程</a> 从Git官网下载：<a href="https://git-scm.com/download/win">Git - Downloading Package</a> 现在的机子基本都是64位的，选择64位的安装包，下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash</p>
<p><img src="https://pic3.zhimg.com/80/v2-8b1cbe253d6e0301bd9a68c6f98a9f52_1440w.jpg" alt="img"></p>
<p>或者在菜单里搜索Git Bash，设置user.name和user.email配置信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的GitHub用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>

<p>生成ssh密钥文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p>
<p><img src="https://pic4.zhimg.com/v2-d1e47103ec1aa8675f68688c5d63bd27_r.jpg" alt="img"></p>
<p>打开<a href="https://github.com/settings/keys">GitHub_Settings_keys</a> 页面，新建new SSH Key</p>
<p><img src="https://pic1.zhimg.com/v2-72a3f22c080e99343c3cc4aabce10e3c_r.jpg" alt="img"></p>
<p>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。<br>在Git Bash中检测GitHub公钥设置是否成功，输入 ssh <a href="mailto:&#x67;&#x69;&#116;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;">&#x67;&#x69;&#116;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;</a> ：</p>
<p><img src="https://pic3.zhimg.com/v2-da481ffa686410becd4186c656b4ebd6_r.jpg" alt="img"></p>
<p>如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p>
<p><strong>安装Node.js</strong></p>
<p>Hexo基于Node.js，Node.js下载地址：<a href="https://nodejs.org/en/download/">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v :</p>
<p><img src="https://pic1.zhimg.com/80/v2-76ea38e9545e606f975781e47933b010_1440w.jpg" alt="img"></p>
<p>检测npm是否安装成功，在命令行中输入npm -v :</p>
<p><img src="https://pic2.zhimg.com/80/v2-bede250b8456df92475b455fda8c1dd9_1440w.jpg" alt="img"></p>
<p>到这了，安装Hexo的环境已经全部搭建完成。</p>
<p><strong>安装Hexo</strong></p>
<p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行</p>
<p><img src="https://pic1.zhimg.com/80/v2-a5450a466c0927c25dff8ad6f1d2046c_1440w.jpg" alt="img"></p>
<p>使用npm命令安装Hexo，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure>



<p>这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>

<p>注意，这里的命令都是作用在刚刚创建的Blog文件夹中。</p>
<p>为了检测我们的网站雏形，分别按顺序输入以下三条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new test_my_site</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>这些命令在后面作介绍，完成后，打开浏览器输入地址：</p>
<p>localhost:4000</p>
<p>可以看出我们写出第一篇博客，只不过我下图是我修改过的配置，和你的显示不一样。</p>
<p><img src="https://pic4.zhimg.com/v2-123e73c0630d299b1c856d99b04b55bb_r.jpg" alt="img"></p>
<p>现在来介绍常用的Hexo 命令</p>
<p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客</p>
<p>命令简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署</p>
<p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p>
<p>刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。</p>
<p><strong>推送网站</strong></p>
<p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点</strong>配置文件，如下图</p>
<p><img src="https://pic2.zhimg.com/v2-cb1fd5e5a2e73f513234e434724c7c55_r.jpg" alt="img"></p>
<p>进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题</strong>配置文件，如下图</p>
<p><img src="https://pic4.zhimg.com/v2-4252029e5634bf91c7d58916ae2b8ac3_r.jpg" alt="img"></p>
<p>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p>
<p>deploy:<br>type: git<br>repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git<br>branch: master参考如下：</p>
<p><img src="https://pic1.zhimg.com/v2-279ac5149b577f04dc099defbb12eaa8_r.jpg" alt="img"></p>
<p>保存站点配置文件。</p>
<p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>



<p>如果出现拒绝访问则需要<code>ping alexandermucc.github.io</code></p>
<p>若出现本地ip则需要对host配置</p>
<p><img src="C:/Users/ShengZhan/AppData/Roaming/Typora/typora-user-images/image-20210619114934169.png" alt="image-20210619114934169"></p>
<p>需要在站长工具( <a href="https://ip.tool.chinaz.com/github.io)%E4%B8%8A%E6%9F%A5%E6%89%BEgithub.io%E5%9F%9F%E5%90%8D%E7%9A%84ip%EF%BC%8C%E6%8A%8A%E8%8E%B7%E5%8F%96%E7%9A%84ip%E5%9C%A8hosts%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB">https://ip.tool.chinaz.com/github.io)上查找github.io域名的ip，把获取的ip在hosts文件中添加对应关系</a></p>
<p><strong>解决途径</strong>：修改本地hosts文件（位置：C:/windows/system32/drivers/etc/hosts）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> GitHub Start</span></span><br><span class="line">185.199.111.153		binance-docs.github.io</span><br><span class="line">52.74.223.119     github.com</span><br><span class="line">192.30.253.119    gist.github.com</span><br><span class="line">54.169.195.247    api.github.com</span><br><span class="line">185.199.111.153   assets-cdn.github.com</span><br><span class="line">151.101.76.133    raw.githubusercontent.com</span><br><span class="line"><span class="meta">#</span><span class="bash"> GitHub End</span></span><br></pre></td></tr></table></figure>

<p>这时，我们分别输入三条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href="http://xxxx.github.io/">http://xxxx.github.io</a> (知乎排版可能会出现”http://“字样，参考下图) 比如我的xxxx就是我的GitHub用户名：</p>
<p><img src="https://pic1.zhimg.com/80/v2-d750452f4258bf0967d5629ef23d1b10_1440w.jpg" alt="img"></p>
<p>你就会发现你的博客已经上线了，可以在网络上被访问了。</p>
<p><strong>绑定域名</strong></p>
<p>虽然在Internet上可以访问我们的网站，但是网址是GitHub提供的:<a href="http://xxxx.github.io/">http://xxxx.github.io</a> (知乎排版可能会出现”http://“字样) 而我们想使用我们自己的个性化域名，这就需要绑定我们自己的域名。这里演示的是在阿里云万网的域名绑定，在国内主流的域名代理厂商也就阿里云和腾讯云。登录到阿里云，进入管理控制台的域名列表，找到你的个性化域名，进入解析</p>
<p><img src="https://pic3.zhimg.com/v2-47323ad4490e206aef93a3d68f0670b6_r.jpg" alt="img"></p>
<p>然后添加解析</p>
<p><img src="https://pic3.zhimg.com/v2-40222b3a295bb692aac22829a8ec3be2_r.jpg" alt="img"></p>
<p>包括添加三条解析记录，192.30.252.153是GitHub的地址，你也可以ping你的 <a href="http://xxxx.github.io/">http://xxxx.github.io</a> 的ip地址，填入进去。第三个记录类型是CNAME，CNAME的记录值是：你的用户名.<a href="http://github.io/">http://github.io</a> 这里千万别弄错了。第二步，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p>
<p><img src="https://pic4.zhimg.com/v2-85ba6dda906f22dea4c03df2b47d994b_r.jpg" alt="img"></p>
<p>点击save保存。第三步，进入本地博客文件夹 ，进入blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www。这里我还是写了www(不建议带有www):</p>
<p><img src="https://pic1.zhimg.com/v2-79abfff91af3f520e24cb91acf6aa994_r.jpg" alt="img"></p>
<p>保存，命名为CNAME ，注意保存成<strong>所有文件</strong>而不是<strong>txt文件</strong>。</p>
<p>完成这三步，进入blog目录中，按住shift键右击打开命令行，依次输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cleanhexo ghexo d</span><br></pre></td></tr></table></figure>

<p>这时候打开浏览器在地址栏输入你的个性化域名将会直接进入你自己搭建的网站。</p>
<p><strong>更换主题</strong></p>
<p>如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：<a href="https://hexo.io/themes/">Themes</a> 我自己使用的是Next主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>这是将Next主题下载到blog目录的themes主题下的next文件夹中。打开<strong>站点</strong>的_config.yml配置文件，修改主题为next</p>
<p><img src="https://pic1.zhimg.com/v2-b1997377e82408cb15b485c65ae00f70_r.jpg" alt="img"></p>
<p>打开<strong>主题</strong>的_config.yml配置文件，不是站点主题文件，找到Scheme Settings</p>
<p><img src="https://pic2.zhimg.com/v2-1ac152c4aabe4c10b762ee27552f1105_r.jpg" alt="img"></p>
<p>next主题有三个样式，我用的是Pisces，你们可以自己试试看，选择你自己喜欢的样式（只需要把行首的#去除，#是注释），选择好后，再次部署网站，hexo g、hexo d，查看效果。选择其他主题，按照上述过程即可实现。</p>
<p><strong>初识Markdown语法</strong></p>
<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于html已经算是轻量级语言，像有道云笔记也支持Markdown写作。并且Markdown完全兼容html，也就是可以在文章里直接插入html代码。比如给博文添加音乐，就可以直接把音乐的外链html代码插入文章中。具体语法参看：<a href="http://www.appinn.com/markdown/">Markdown 语法说明(简体中文版)</a> 可以说十分钟就可以入门。当然，工欲善其事必先利其器，选择一个好的Markdown编辑器也是非常重要的，这里推荐<a href="http://code52.org/DownmarkerWPF/">MarkPad</a> 和<a href="http://www.markdownpad.com/">The Markdown Editor for Windows</a> ，这是带有预览效果的编辑器，也可以使用本地的文本编辑器，更多的Markdown的语法与编辑器自己可以搜索了解。</p>
<p><strong>发布文章</strong></p>
<p>我们开始正式发布上线博客文章，在命令行中输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&quot;博客名字&quot;</span></span><br></pre></td></tr></table></figure>



<p>我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 <strong>博客名字.md</strong> 文件，使用Markdown编辑器打开，就可以开始你的个人博客之旅了，Markdown常用的样式也就十来种，完全能够满足一般博文的样式要求，这是我的一篇博文内容示例：</p>
<p><img src="https://pic1.zhimg.com/v2-4f96cd03a88e68b8ae86c38bfb0808ac_r.jpg" alt="img"></p>
<p>通过带有预览样式的Markdown编辑器实时预览书写的博文样式，也可以通过命令 hexo s –debug 在本地浏览器的localhost:4000 预览博文效果。写好博文并且样式无误后，通过hexo g、hexo d 生成、部署网页。随后可以在浏览器中输入域名浏览。</p>
<p><strong>寻找图床</strong></p>
<p>图床，当博文中有图片时，若是少量图片，可以直接把图片存放在source文件夹中，但这显然不合理的，因为图片会占据大量的存储的空间，加载的时候相对缓慢 ，这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用Markdown语法，**<img src="C:/Users/ShengZhan/Desktop/%25E5%25A4%2596%25E9%2583%25A8%25E9%2593%25BE%25E6%258E%25A5" alt="图片信息">** 完成图片的插入，这种网站就被成为图床。常见的简易的图床网站有：<a href="http://www.tietuku.com/">贴图库图片外链</a> 国内算比较好的图床我认为有两个：新浪微博和 <a href="https://www.qiniu.com/">七牛云</a> ，七牛云的使用方法可以参看其他文章。图床最重要的就是稳定速度快，所以在挑选图床的时候一定要仔细，下图是博文插入图片，使用图床外链的示例：</p>
<p><img src="https://pic4.zhimg.com/v2-92372e522595af139ace5f371aae3ff3_r.jpg" alt="img"></p>
<p><strong>个性化设置</strong></p>
<p>所谓的个性化设置就是根据个人需要添加不同的插件及功能。</p>
<p>基本的有：</p>
<p>在站点配置文件_config.yml修改基本的站点信息</p>
<p><img src="https://pic4.zhimg.com/v2-78bc0e4e6498c9c3cb269b3254d8379f_r.jpg" alt="img"></p>
<p>依次是网站标题、副标题、网站描述、作者、网站头像外部链接、网站语言、时区等。</p>
<p>在主题配置文件_config.yml修改基本的主题信息，如：</p>
<p><img src="https://pic2.zhimg.com/80/v2-451c5cb2fd6516650ad8ca608031bf0d_1440w.jpg" alt="img"></p>
<p>博文打赏的微信、支付宝二维码图片，这里我是直接把这两张放在根目录的source文件夹中，并没有使用图床外链。</p>
<p><img src="https://pic2.zhimg.com/v2-69bbc45e973eb6916e08187ed8b33a55_r.jpg" alt="img"></p>
<p>社交外链的设置，即在侧栏展示你的个人社交网站信息。</p>
<p><img src="https://pic4.zhimg.com/v2-5b3f6e02e0d3a0cdb685a4d2fd2718cb_r.jpg" alt="img"></p>
<p>博文分享的插件jiathis，值设置为true。在配置文件中有很多的个性化设置，可以自尝试更多的修改。</p>
<p>进阶个性化：</p>
<ul>
<li>添加网易云音乐</li>
</ul>
<p>打开网页版的网易云音乐，选择喜欢的音乐，点击生成外链播放器</p>
<p><img src="https://pic2.zhimg.com/v2-fcb7d44ccdca3760c98db0d13817f2b5_r.jpg" alt="img"></p>
<p>复制外链的代码</p>
<p><img src="https://pic4.zhimg.com/v2-16eec195312cde7b1d257fac6f3c8d0b_r.jpg" alt="img"></p>
<p>比如在侧栏插入这首歌的音乐播放器，修改 blog\themes\next\layout_macro的sidebar.swig文件，添加刚刚复制的外链代码</p>
<p><img src="https://pic4.zhimg.com/v2-03db51002497b27e4d5888e0efd577c7_r.jpg" alt="img"></p>
<p>重新生成、部署网页，效果如下</p>
<p><img src="https://pic2.zhimg.com/80/v2-3d587bf919df92db38e2608f034e50f1_1440w.jpg" alt="img"></p>
<ul>
<li>设置背景</li>
</ul>
<p>把你挑选的背景图片命名为：background.jpg，放在blog\themes\next\source\images里，在blog\themes\next\source\css_custom文件的custom.styl首部添加：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;  <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">/images/background.jpg</span>);  <span class="attribute">background-attachment</span>: fixed;&#125;</span><br></pre></td></tr></table></figure>

<p>background-attachment: fixed;是固定背景图片。</p>
<p>这是设置一张静态图片作为背景，其实Next主题自带有动态的背景效果，修改主题配置文件中的canvas_nest: false为canvas_nest: true即可。</p>
<ul>
<li>增加侧栏菜单条目</li>
</ul>
<p>默认的侧栏菜单条目有：首页、归档、标签、关于、搜索等。如果你想要增加其他的菜单条目，修改主题配置文件_config.yml里的Menu Settings中的menu和menu_icons两个地方</p>
<p><img src="https://pic3.zhimg.com/v2-666a22fedbba95d979eeb26e52fc29e2_r.jpg" alt="img"></p>
<p>其中menu里是配置菜单项对应的页面位置（如：/love），menu_icons对应菜单项的图标，这里的图标是来自于<a href="http://fontawesome.io/">Font Awesome</a> ，所以你需要在Font Awesome网站上找到你需要的icon，然后把该icon的名字写在menu_icons对应菜单名后面，注意冒号有一个英文输入状态的空格。设置好后，在命令行里输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;你所要增加的菜单项名称（要和你在menu中的填写要匹配）&quot;</span></span><br></pre></td></tr></table></figure>

<p>新建的页面在博客根目录下的source文件里，这时你就可以对新建的页面自定义设计。</p>
<p>还有更多的进阶个性化设置，如SEO、评论系统、个人头像、博客分享、订阅功能、High功能、404网页设置等，可以参看：</p>
<p><a href="http://theme-next.iissnan.com/theme-settings.html">主题配置 - NexT 使用文档</a></p>
<p><a href="http://theme-next.iissnan.com/third-party-services.html">第三方服务集成 - NexT 使用文档</a></p>
<p><a href="http://theme-next.iissnan.com/tag-plugins.html">内置标签 - NexT 使用文</a></p>
<p><a href="http://theme-next.iissnan.com/tag-plugins.html">档</a><a href="http://theme-next.iissnan.com/advanced-settings.html">进阶设定 - NexT 使用文档</a></p>
<p>有很多人私信问我High功能特效如何设置，这里推荐一篇同是Next主题网站博主的文章：<a href="http://www.iamlj.com/2016/08/add-special-effect-harlem-shake-for-hexo/">为Hexo Next主题添加哈林摇特效（五）</a></p>
<p><strong>其他</strong></p>
<p>终于写到这里了，也算是基本圆满完成了我的写作初衷，总结自己的一些经验，分享一些有趣的东西，不过脖子也是僵硬的受不了。我知道很多人想要建立自己的个人网站却一直没有付诸行动，希望这篇文章能给你一点点灵感与想法，just do it。本文是windows平台的搭建过程，其他平台可以参看相关资料，也有很多其他优秀的博客框架值得学习。如果有任何建议或想法、或疑问欢迎在评论区交流， 做好的网站不妨在评论区贴出网址，让大家一起学习。</p>
<p><strong>附录</strong></p>
<p><strong>以下是评论区贴出网址的博客展示：</strong></p>
<p><a href="http://jmyblog.top/">…Miss.j BlogDiary…</a></p>
<p><a href="http://ibb.chaodamiao.com/">RILWEIC</a></p>
<p><a href="http://blog.sunxinfei.com/">Xin’s Notes</a></p>
<p><a href="https://guguant.github.io/">飞鸟与鱼</a></p>
<p><a href="http://www.fuck-goods.tk/">无名博客</a></p>
<p><a href="http://helloqa.com/">iTesting软件测试知识分享</a></p>
<p><a href="http://bolg.upsky.top/">赵小源的个人博客</a></p>
<p><a href="http://www.huajiayi.top/">华嘉熠’s Blog</a></p>
<p><a href="http://asmire.site/">Cocoon</a></p>
<p><a href="https://luoshaoxiong.github.io/">罗少雄’s Blog</a></p>
<p><a href="https://lruihao.github.io/">李四啊_</a></p>
<p><strong>其他优秀个人博客展示：</strong></p>
<p><a href="https://www.dandyweng.com/">翁天信 · Dandy Weng</a> <a href="http://chaoxuprime.com/">chaoxuprim</a> <a href="http://kenjiendo.com/">KENJI ENDO</a> <a href="http://shenzekun.cn/">Moorez</a> <a href="https://codesky.me/">CodeSky 代码之空</a> <a href="http://www.helloshawn.cn/">大江东去</a> <a href="http://iconmoon.com/">UI Design Portfolio of JJ Ying</a> <a href="http://www.jeyzhang.com/">JeyZhang</a> <a href="http://blog.lightina.cn/">jacklightChen | 得到的都是侥幸</a> <a href="https://qingpei.me/">edwardtoday</a> <a href="http://rafaltomal.com/">Rafal Tomal - Web Designer and Genesis Developer</a> <a href="http://strml.net/">Projects and Work</a> <a href="http://miaoxiaoer.com/">绘画爱好者</a> <a href="http://ursocute.github.io/">万世奇的博客</a> <a href="https://rauchg.com/">Guillermo Rauch</a></p>
<p><strong>相关文章：</strong></p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/58654392">Hexo 从 GitHub 到阿里云</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>随笔-2021.6.22</title>
    <url>/archives/c116b4d3.html</url>
    <content><![CDATA[<p><strong><a href="https://www.cnblogs.com/Merak21/articles/14884478.html">无论什么工具，花了多少心思配置折腾，都比不上安心读文章学习，做笔记总结，写一些感悟。再华丽的方式都比不上一篇篇积累自身心路历程的文章，这段时间需要大量学习，开始自己的新阶段。</a></strong></p>
<p>今天配置图床时，在博客园中看到了上面的话，很有点醒作用。</p>
<p><strong>不要沉醉于形式主义的束缚，实用主义才是正途。</strong></p>
<hr>
<p>看《毛选》  <!--摘录--></p>
<blockquote>
<p>谁是我们的敌人？谁是我们的朋友？这个问题是革命的首要问题。</p>
</blockquote>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>感想</tag>
        <tag>书籍摘录</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的优化</title>
    <url>/archives/1253b4af.html</url>
    <content><![CDATA[<ol>
<li><p>关于侧边栏图像这一块的圆角问题</p>
</li>
<li><p>关于网站底部 <code>总访问量</code>、<code>总访问人数</code> 问题</p>
<p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624335910238/image-20210622092740967.png" alt="image-20210622092740967"></p>
</li>
<li><p>github中的标签问题</p>
</li>
<li><p>豆瓣中的书籍问题</p>
</li>
<li><p>分类模块</p>
</li>
<li><p>置顶的显示问题</p>
</li>
<li><p>图床问题</p>
</li>
</ol>
  <span id="more"></span>



<h1 id="7-图床问题"><a href="#7-图床问题" class="headerlink" title="7 图床问题"></a>7 图床问题</h1><p>通过github，picgo的方式，无法成功，图片上传不上去，只成功一次</p>
<p>有方法通过cdn的方式实现，了解不深，且寻找的解决办法不能使我访问</p>
<h2 id="7-1-步骤如下"><a href="#7-1-步骤如下" class="headerlink" title="7.1 步骤如下"></a>7.1 步骤如下</h2><p>故转而通过gitee的方式实现图床的功能，通过自定义的插件实现该功能</p>
<p>参考：<a href="https://gitee.com/pangyuworld/typora-upload-plugin">一款为实现Typora使用gitee作为图床的java版本插件</a></p>
<blockquote>
<p>需要的环境和配置</p>
</blockquote>
<ul>
<li>Java环境</li>
<li>typaro软件</li>
<li>maven</li>
<li>idea</li>
</ul>
<ol>
<li><p>登录gitee并创建一个公开仓库</p>
</li>
<li><p>申请access_token<a href="https://gitee.com/profile/personal_access_tokens">gitee生成accessToken</a></p>
</li>
<li><p>下载该仓库源码</p>
</li>
<li><p>配置<code>com.pang.Config</code>，其配置参考注释</p>
</li>
<li><p>在源码根目录使用<code>maven:package</code>指令进行编译,编译生成的java文件为<code>./target/typora-custom-script-1.0-SNAPSHOT-jar-with-dependencies.jar</code></p>
<p><strong>其中maven:package  最好到IDE中到该文件的根目录</strong></p>
<p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624337030127/image-20210622124348718.png" alt="image-20210622124348718"></p>
<p><strong>右键点击生成的Jar包，得到生成的Jar包文件路径</strong></p>
<p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624337446284/image-20210622124601992.png" alt="image-20210622124601992"></p>
</li>
<li><p>打开Typora进行配置</p>
<ol>
<li><p>选择<code>偏好设置-&gt;图像-&gt;上传服务</code></p>
</li>
<li><p>选择<code>Custom Command</code></p>
</li>
<li><p>编辑自定义命令,指令如下<code>java -jar 生成的typora-custom-script-1.0-SNAPSHOT-jar-with-dependencies.jar的绝对路径</code>，例如<code>java -jar /home/pang/project/typora-custom-script/target/typora-custom-script-1.0-SNAPSHOT-jar-with-dependencies.jar</code></p>
<p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624337300008/image-20210622124818775.png" alt="image-20210622124818775"></p>
</li>
<li><p>点击<code>验证图片上传选项</code>，即可得到结果</p>
<img src="https://gitee.com/alexandermucc/img/raw/master/img/1624337367280/image-20210622124926150.png" alt="image-20210622124926150" style="zoom:50%;" /></li>
<li><p>点击<code>插入图片时..</code>后面的下拉框，选择<code>上传图片</code>即可配置完成</p>
</li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Java基础之类与对象</title>
    <url>/archives/11f64e53.html</url>
    <content><![CDATA[<h1 id="Java基础之类与对象"><a href="#Java基础之类与对象" class="headerlink" title="Java基础之类与对象"></a>Java基础之类与对象</h1><span id="more"></span>

<h1 id="一、OOP思想"><a href="#一、OOP思想" class="headerlink" title="一、OOP思想"></a>一、OOP思想</h1><p>数据第一，其次是算法</p>
<h2 id="1-类"><a href="#1-类" class="headerlink" title="1 类"></a>1 类</h2><h3 id="1-1-两大的特性"><a href="#1-1-两大的特性" class="headerlink" title="1.1 两大的特性"></a>1.1 两大的<strong>特性</strong></h3><p><strong>封装【最重要】</strong>、继承</p>
<hr>
<p><strong>封装</strong>：实例字段不能别外界修改，只能通过方法调用。</p>
<p><strong>好处</strong>：数据更加安全</p>
<hr>
<p><strong>继承</strong></p>
<hr>
<h3 id="1-2-类中的组成"><a href="#1-2-类中的组成" class="headerlink" title="1.2 类中的组成"></a>1.2 类中的组成</h3><p><strong>实例字段、方法、状态</strong></p>
<hr>
<p>实例字段：类中的变量。对象中的数据。</p>
<p>获取实例字段的值一般需要三项内容：私有数据字段、公共字段访问器方法和更改器方法即Getter和Setter方法</p>
<p>方法：操作数据的过程</p>
<p>状态：特定实例对象实例字段的集合。通俗来说类中变量所赋的值。</p>
<hr>
<h2 id="2-对象"><a href="#2-对象" class="headerlink" title="2 对象"></a>2 对象</h2><h3 id="三大特征"><a href="#三大特征" class="headerlink" title="三大特征"></a><strong>三大特征</strong></h3><p><strong>对象的行为</strong>：对象完成的操作。即对象的方法</p>
<p><strong>对象的状态</strong>：每个对象保存描述当前状况的信息。即调用方法，如何响应</p>
<p><strong>对象的标识</strong>：区分相同行为不同状态的对象。举例人与人之间肯定存在着差异。</p>
<h2 id="3-类之间的关系"><a href="#3-类之间的关系" class="headerlink" title="3 类之间的关系"></a>3 类之间的关系</h2><h4 id="依赖-uses-a"><a href="#依赖-uses-a" class="headerlink" title="依赖 uses-a"></a><strong>依赖 uses-a</strong></h4><p>​    一个类的方法使用或操纵另一个类的对象。</p>
<p>​    即一个类的方法需要使用另一个类的信息。举例，订单中需要客户的信用情况等，而商品则无需客户的信息。所以来说<code>订单类依赖客户类</code>。</p>
<p>​    <strong>需要降低依赖关系，避免耦合</strong></p>
<h4 id="聚合-has-a"><a href="#聚合-has-a" class="headerlink" title="聚合 has-a"></a><strong>聚合 has-a</strong></h4><p>包含关系。</p>
<h4 id="继承-is-a"><a href="#继承-is-a" class="headerlink" title="继承 is-a"></a><strong>继承 is-a</strong></h4><h1 id="二、预定义类"><a href="#二、预定义类" class="headerlink" title="二、预定义类"></a>二、预定义类</h1><h2 id="1-对象和对象变量"><a href="#1-对象和对象变量" class="headerlink" title="1 对象和对象变量"></a>1 对象和对象变量</h2><p><strong>对象</strong>通过一般通过构造器创建，但也可以通过<code>静态工厂方法-类调用静态方法</code>创建。构造器好比一个容器，对象好比容器中的物体。</p>
<p><strong>对象变量</strong>是对对象的==<strong>引用</strong>==。算是起别名的意思，类比成人，每个人都有名字。</p>
<h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p> 与类同名</p>
<p>构造器可以有多个</p>
<p>参数至少0个</p>
<p>没有返回值</p>
<p>和new操作符一起使用</p>
<p>在所有方法中不要使用与实例字段同名的变量</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>更改器方法和访问器方法</p>
<p>更改器方法会改变对象的状态</p>
<p>访问器方法只能访问对象不能修改对象</p>
<h2 id="更改器方法和访问器方法"><a href="#更改器方法和访问器方法" class="headerlink" title="更改器方法和访问器方法"></a>更改器方法和访问器方法</h2><p>好比Getter和Setter方法</p>
<p><strong>更改器方法</strong>：对象的状态会发生变化</p>
<p><strong>访问器方法</strong>：只访问对象而不修改对象的方法</p>
<h1 id="三、自定义类"><a href="#三、自定义类" class="headerlink" title="三、自定义类"></a>三、自定义类</h1><p><strong>文件名必须与public类相匹配</strong></p>
<p><strong>一个源文件中只能有一个public类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-null引用"><a href="#1-null引用" class="headerlink" title="1 null引用"></a>1 null引用</h2><p>引用数据类型会出现空指针异常</p>
<p>基本数据类型则不会出现该异常</p>
<h2 id="2-显示参数和隐式参数"><a href="#2-显示参数和隐式参数" class="headerlink" title="2 显示参数和隐式参数"></a>2 显示参数和隐式参数</h2><p>显示参数：在方法中声明</p>
<p>隐式参数：未在方法中声明。一般用this指示隐式参数用于区分显示参数</p>
<h2 id="3-基于类的权限访问"><a href="#3-基于类的权限访问" class="headerlink" title="3 基于类的权限访问"></a>3 基于类的权限访问</h2><p>该类的方法可以访问<u>所属类</u>的<u>所有对象</u>的<u>私有数据</u>。可以理解为方法能访问所有的实例字段</p>
<h2 id="4-final实例字段"><a href="#4-final实例字段" class="headerlink" title="4 final实例字段"></a>4 final实例字段</h2><p>final关键字修饰的字段为不可变字段。但对于String类中，还是可以改变</p>
<h2 id="5-static修饰的字段和方法"><a href="#5-static修饰的字段和方法" class="headerlink" title="5 static修饰的字段和方法"></a>5 static修饰的字段和方法</h2><p><strong>被static修饰的方法和字段，属于类而不属于任何单个对象</strong></p>
<hr>
<p><strong>静态字段</strong>也被成为类字段</p>
<p>若没有显示赋初值，则每次加载类时都会初始化为默认值<code>0,false,null</code></p>
<hr>
<p><strong>静态常量</strong></p>
<p><strong>静态方法</strong></p>
<ul>
<li>只能访问静态字段</li>
<li>不需要访问对象的状态</li>
</ul>
<hr>
<h2 id="6-方法参数"><a href="#6-方法参数" class="headerlink" title="6 方法参数"></a>6 方法参数</h2><p>==<strong>Java中总是采用按值调用</strong>==，方法得到的是所有参数的一个副本。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 1. 数字参数不能改变</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">double</span> percent = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before&quot;</span> + percent);</span><br><span class="line">        tripleValue(percent);</span><br><span class="line">        System.out.println(<span class="string">&quot;After&quot;</span> + percent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *  对象参数的状态</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Employee harry = <span class="keyword">new</span> Employee(<span class="string">&quot;Harry&quot;</span>, <span class="number">50000</span>);</span><br><span class="line">        tripleSalary(harry);</span><br><span class="line">        System.out.println(harry.getSalary());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *  交换对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        Employee a = <span class="keyword">new</span> Employee(<span class="string">&quot;A&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        Employee b = <span class="keyword">new</span> Employee(<span class="string">&quot;B&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        swap(a,b);</span><br><span class="line">        System.out.println(a.getName());</span><br><span class="line">        System.out.println(b.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 交换</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">        harry = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = harry;</span><br><span class="line">        System.out.println(a.getName());</span><br><span class="line">        System.out.println(b.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tripleValue</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">        x *= <span class="number">3</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;End of method&quot;</span> + x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tripleSalary</span><span class="params">(Employee x)</span></span>&#123;</span><br><span class="line">        x.raiseSalary(<span class="number">200</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;End of method&quot;</span> + x.getSalary());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Employee x , Employee y)</span></span>&#123;</span><br><span class="line">        Employee temp = x;</span><br><span class="line">        x = y;</span><br><span class="line">        y = temp;</span><br><span class="line">        System.out.println(<span class="string">&quot;End of method&quot;</span> + x.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;End of method&quot;</span> + y.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> raise = salary * byPercent / <span class="number">100</span>;</span><br><span class="line">        salary += raise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Before10<span class="number">.0</span></span><br><span class="line">End of method30<span class="number">.0</span></span><br><span class="line">After10<span class="number">.0</span></span><br><span class="line">End of method150000<span class="number">.0</span></span><br><span class="line"><span class="number">150000.0</span></span><br><span class="line">End of methodB</span><br><span class="line">End of methodA</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">--------</span><br><span class="line">B</span><br><span class="line">A</span><br></pre></td></tr></table></figure>



<hr>
<p><strong>小结</strong></p>
<ul>
<li>方法不能修改基本数据类型的参数</li>
<li>方法可以改变对象参数的状态</li>
<li>方法不能让一个对象参数引用一个新的对象</li>
</ul>
<hr>
<h1 id="四、对象构造"><a href="#四、对象构造" class="headerlink" title="四、对象构造"></a>四、对象构造</h1><p>对象构造：定义对象的初始化状态</p>
<h2 id="1-重载"><a href="#1-重载" class="headerlink" title="1 重载"></a>1 重载</h2><p>重载：同名不同参数的方法</p>
<p>重载解析：查找匹配重载中的方法</p>
<h2 id="2-默认字段初始化"><a href="#2-默认字段初始化" class="headerlink" title="2 默认字段初始化"></a>2 默认字段初始化</h2><p>构造器没有显示设置初值，则会自动赋为默认值。</p>
<p>数值为0，布尔型为false，对象引用为null。</p>
<p><strong>不赋初值影响可读性</strong></p>
<p>字段和局部变量的区别</p>
<ul>
<li>字段可以不用初始化</li>
<li>方法中的局部变量必须初始化</li>
</ul>
<h2 id="3-无参构造器"><a href="#3-无参构造器" class="headerlink" title="3 无参构造器"></a>3 无参构造器</h2><p>类默认自带一个无参构造器，会对所属类的实例字段赋默认值</p>
<p><strong>当有一个有参构造器时，若想无参构造器，则必须提供一个无参构造器</strong></p>
<h2 id="4-显示字段初始化"><a href="#4-显示字段初始化" class="headerlink" title="4 显示字段初始化"></a>4 显示字段初始化</h2><p>避免发生空指针异常</p>
<p>创建类就给所属类的实例字段赋初值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name = <span class="string">&quot;&quot;</span>;</span><br><span class="line"> 	<span class="keyword">private</span> <span class="keyword">double</span> salary = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextId;</span><br><span class="line"> 	<span class="keyword">private</span> <span class="keyword">int</span> id = assignId();</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">assignId</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = nextId;</span><br><span class="line">    nextId++;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-参数名"><a href="#5-参数名" class="headerlink" title="5 参数名"></a>5 参数名</h2><p>参数名尽量避免简单，需要和实例字段具有区分性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String aName, <span class="keyword">double</span> aSalary)</span></span>&#123;</span><br><span class="line">  name = aName;</span><br><span class="line">  salary = aSalary;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String aName, <span class="keyword">double</span> aSalary)</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-关键字this"><a href="#6-关键字this" class="headerlink" title="6 关键字this"></a>6 关键字this</h2><p>另外有一个一个参数构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">double</span> aSalary)</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(<span class="string">&quot;Employee #&quot;</span>+nextId,aSalary);</span><br><span class="line">  nextId++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-初始化块"><a href="#7-初始化块" class="headerlink" title="7 初始化块"></a>7 初始化块</h2><p><strong>初始化数据字段的方法</strong></p>
<ul>
<li>构造器中设置</li>
<li>声明中赋值</li>
<li>初始化块赋值</li>
</ul>
<p>首先运行初始化块，初始化块中首先运行静态代码块，静态代码块一共只会执行一次。</p>
<p>然后运行构造器主体部分</p>
<hr>
<p><strong>调用构造器的过程</strong></p>
<pre><code>1. 构造器**第一行**调用另一个构造器，则执行另一个构造器
2. 否则，数据字段初始化为默认值`0,false,null`，按照类声明顺序，执行所有字段初始化方法和初始化块。
3. 执行构造器的主体
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Employee&gt; staffs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Employee staff1 = <span class="keyword">new</span> Employee(<span class="string">&quot;Harry&quot;</span>,<span class="number">4000</span>);</span><br><span class="line">        Employee staff2 = <span class="keyword">new</span> Employee(<span class="number">4000</span>);</span><br><span class="line">        Employee staff3 = <span class="keyword">new</span> Employee();</span><br><span class="line">        staffs.add(staff1);</span><br><span class="line">        staffs.add(staff2);</span><br><span class="line">        staffs.add(staff3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Employee staff : staffs) &#123;</span><br><span class="line">            System.out.println(staff);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextId;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        nextId = <span class="keyword">new</span> Random().nextInt(<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对象初始化块</span></span><br><span class="line">    &#123;</span><br><span class="line">        id = nextId;</span><br><span class="line">        nextId++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String aName,<span class="keyword">double</span> aSalary)</span></span>&#123;</span><br><span class="line">        name = aName;</span><br><span class="line">        salary = aSalary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">double</span> salary)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">&quot;Employee #&quot;</span> + nextId , salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, salary=&quot;</span> + salary +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="五、包"><a href="#五、包" class="headerlink" title="五、包"></a>五、包</h1><p>包用来处理类重名问题</p>
<p>包名写法：域名倒序 <code>com.alexandermucc.类名</code></p>
<h2 id="1-类的导入"><a href="#1-类的导入" class="headerlink" title="1 类的导入"></a>1 类的导入</h2><p>完全限定名</p>
<p><code>import</code>导入</p>
<p>==<strong>只能使用星号(*)导入一个包，而不能导入<code>import java.*</code>,<code>import java.*.*</code>所有的包</strong>==</p>
<h2 id="2-静态导入"><a href="#2-静态导入" class="headerlink" title="2 静态导入"></a>2 静态导入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.*</span><br><span class="line"></span><br><span class="line">out.println(<span class="string">&quot;Goodbye,World&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="3-类路径"><a href="#3-类路径" class="headerlink" title="3 类路径"></a>3 类路径</h2><p>类路径：所有包含类文件的集合</p>
<hr>
<p><strong>类能被多个程序共享，需要</strong></p>
<ol>
<li>类文件放在一个目录中</li>
<li>JAR文件放在一个目录中</li>
<li>设置类路径</li>
</ol>
<hr>
<p><strong>类路径包括</strong></p>
<ul>
<li>基目录</li>
<li>当前目录</li>
<li>JAR文件</li>
</ul>
<hr>
<p><strong>设置类路径</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -classpath /home/user/classdir:.:/home/user/archives/archive.jar MyProg</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="六、-文档注释"><a href="#六、-文档注释" class="headerlink" title="六、 文档注释"></a>六、 文档注释</h1><h2 id="1-类注释"><a href="#1-类注释" class="headerlink" title="1 类注释"></a>1 类注释</h2><p>必须放在import之后 类定义之前</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  	*</span></span><br><span class="line"><span class="comment">  	*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Card</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-方法注释"><a href="#2-方法注释" class="headerlink" title="2 方法注释"></a>2 方法注释</h2><p>必须放在所描述的方法之前</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> aName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> aSalary</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String aName,<span class="keyword">double</span> aSalary)</span></span>&#123;</span><br><span class="line">    name = aName;</span><br><span class="line">    salary = aSalary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="七、类设计技巧"><a href="#七、类设计技巧" class="headerlink" title="七、类设计技巧"></a>七、类设计技巧</h1><ul>
<li><p><strong>1 保证数据私有</strong></p>
<p><strong>绝对不要破坏封装性</strong></p>
</li>
<li><p><strong>2 一定要对数据进行初始化</strong></p>
</li>
<li><p><strong>3 不要在类中使用过多的基本类型</strong></p>
</li>
<li><p><strong>用其他类代替基本类型，使代码容易理解</strong></p>
</li>
<li><p><strong>4 不是所有的字段都需要单独的字段访问器和字段更改器</strong></p>
</li>
<li><p><strong>5 分解有过多职责的类</strong></p>
</li>
<li><p><strong>6 类名和方法名要能体现他们的职责</strong></p>
</li>
<li><p><strong>7 优先使用不可变的类</strong></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Java基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>技术学习方法</title>
    <url>/archives/9a1b163b.html</url>
    <content><![CDATA[<h2 id="学习新技术的方法"><a href="#学习新技术的方法" class="headerlink" title="学习新技术的方法"></a>学习新技术的方法</h2><p>学习新技术的几个步骤</p>
<p>写博客时注意培养框架思想。<strong>大局思维导图、细节写博客</strong></p>
<span id="more"></span>

<h3 id="一、-认识和了解"><a href="#一、-认识和了解" class="headerlink" title="一、 认识和了解"></a>一、 认识和了解</h3><p><strong>1. 百科定义</strong>：了解该技术是什么<br><strong>2. 解决什么问题</strong>：<br><strong>3. 同类技术有哪些</strong>：<br><strong>4. 技术的组成部分</strong>：<br><strong>5. 为什么这个技术会出现</strong></p>
<h3 id="二、-学语法学用法"><a href="#二、-学语法学用法" class="headerlink" title="二、 学语法学用法"></a>二、 学语法学用法</h3><p><strong>多思考、多提炼、多总结、写博客</strong></p>
<p>**上手比较容易 **</p>
<ol>
<li>视频教程<blockquote>
<p>阿里云、腾迅课堂、bilibili</p>
</blockquote>
</li>
<li>快速上手视频<blockquote>
<p>看官网的快速入门文档、简单搭建的视频同上面</p>
</blockquote>
</li>
<li>入门博客<blockquote>
<p>CSDN、博客园、简书等</p>
</blockquote>
</li>
</ol>
<p>**比较系统了解 **</p>
<ol>
<li>基础技术类：看权威的书籍、经典的书籍</li>
<li>框架类：看官方文档</li>
</ol>
<h3 id="三、练习"><a href="#三、练习" class="headerlink" title="三、练习"></a>三、练习</h3><ol>
<li>局部练习、小型实战、搭建环境</li>
<li>遇到的坑及时记录、写博客</li>
</ol>
<h3 id="四、造轮子"><a href="#四、造轮子" class="headerlink" title="四、造轮子"></a>四、造轮子</h3><p>上手实际开源项目</p>
<blockquote>
<p>github、gitee等</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>觉醒年代</title>
    <url>/archives/a3c72645.html</url>
    <content><![CDATA[<p>觉醒年代</p>
<span id="more"></span>

<h3 id="李大钊："><a href="#李大钊：" class="headerlink" title="李大钊："></a>李大钊：</h3><p>英雄淘尽大江流，歌舞依然上画楼。一代声华空醉梦，十年潦倒剩穷愁。竹帘半卷江天雨，蕉扇初迎海外秋。忆到万山无语处，只应共泛五湖舟</p>
<h3 id="蔡元培校长办学理念"><a href="#蔡元培校长办学理念" class="headerlink" title="蔡元培校长办学理念"></a>蔡元培校长办学理念</h3><p>各位，五年前严复先生为北大校长时，我服务于教育部，做教育总长。记得北大开学的那天，我为本校做了一点贡献。诸君多自预科毕业而来，想必也知道，<strong>士别三日当刮目相看</strong>，何况时日已过去数年，诸君与往昔相比，一定有了长足的进步。我今天就要服务于北大，我有三件事要告诉诸君：</p>
<p>一、<strong>抱定宗旨</strong>。诸君来此求学，必有一定宗旨，须知宗旨，正大与否，必先知大学之性质。<strong>大学者，研究高深学问之者也</strong>。现在外面常常有人指责北大之腐败，是因为来此求学者，都抱有当官发财的思想，以此为捷径。因为一心要做官，一心想发财，所以，从不问教员之学问深浅，唯问教员官职的大小，官阶大的，就特别受欢迎，这大概是为了方便毕业时有人提携吧。我想说的是，诸君来北大求学，三年或四年，时间不谓不多，<strong>如能爱惜光阴，孜孜求学，则其造诣定然会很高、很深</strong>。诸君来北大求学的宗旨是做官发财，那这个宗旨就错了，求学的路，就必然走偏了。<u>平时冶游，考试来了，才去翻读讲义，不问学问之有无，唯争分数之多寡；考试结束，书籍，束之高阁，毫不过问，潦草塞责；文凭到手，即可以此活动于社会，光阴虚度，学问毫无</u>。这是自误啊，这与到北大求学的真正宗旨，是大相背驰的。大家也许还记得，发生不久的辛亥革命，我们之所以要革命，就是因为清朝政府太腐败，就是现在也有许多人，对现状不满意，也是因为社会道德沦丧。<u>诸君在这个时候，如果不打好基础，勤奋求学，万一为生计所迫，做了教员，则一定会耽误学生哪；你进入政界，则一定会耽误国家呀，这是耽误别人，误人误己</u>。所以，<strong>宗旨不可以不正大</strong>，这是我希望于诸君者之一。</p>
<p>二、<strong>砥砺德行</strong>。如今的社会风气啊，越来越苟且敷衍，只顾眼前，道德伦丧、败坏德行的事情，触目皆是，不是德行根基牢固的人，少有不被这种社会风气所污染。各位，国家的兴衰，要看社会风气是高尚还是低劣，如果都流行于这种社会风气，前途不堪设想，所以<strong>要有卓越之人，以身作则，尽力去矫正这种颓废的社会风气</strong>。诸君皆为大学学生，地位甚高，肩此重任，责无旁贷。如果德不修、学不讲，还与这种颓废的社会风气同流合污，那亦是侮辱自己，更何谈，做他人的榜样呢？所以，<strong>品行不可以不严谨对待和修养</strong>，这是我希望于诸君者之二。</p>
<p>三、<strong>尊敬师友、坦诚相见、开诚布公、相互勉励</strong>。各位，我们同处北大，要荣辱与共啊。我相信，我们北大一定会是出文化大家、思想大家的地方。</p>
<p><strong>蔡老的话到今天也有点醒之作用，醍醐灌顶，如坐针毡。</strong></p>
<ul>
<li><p>抱定宗旨，爱惜光阴，孜孜求学才不会误人误己</p>
</li>
<li><p>砥砺德行，以身作则</p>
</li>
</ul>
<h1 id="辜鸿铭"><a href="#辜鸿铭" class="headerlink" title="辜鸿铭"></a>辜鸿铭</h1><p>什么是中国人：有着赤子之心，成人之思，过着心灵生活的人</p>
]]></content>
      <tags>
        <tag>影视</tag>
        <tag>熏陶</tag>
      </tags>
  </entry>
</search>
