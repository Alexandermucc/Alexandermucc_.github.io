<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>安装博客</title>
    <url>/archives/178db9e1.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a><strong>前言：</strong></h2><p>随着互联网浪潮的翻腾，国内外涌现出越来越多优秀的社交网站让用户分享信息更加便捷。然后，如果你是一个不甘寂寞的程序猿（媛），是否也想要搭建一个属于自己的个人网站，如果你曾经或者现在正有这样的想法，请跟随这篇文章发挥你的Geek精神，让你快速拥有自己的博客网站，写文章记录生活，享受这种从0到1的过程。</p>
<span id="more"></span>

<p><a href="https://www.zhihu.com/question/29755481">你见过的最棒的个人博客界面是什么样的？</a></p>
<h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo ?"></a><strong>什么是Hexo ?</strong></h2><p><img src="https://pic2.zhimg.com/v2-6890485c84748900d9dae824b7f7cbb1_r.jpg" alt="img"></p>
<p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。这里我们选用的是GitHub，你没看错，全球最大的同性恋交友网站（逃……）。Hexo同时也是GitHub上的开源项目，参见：<a href="https://github.com/hexojs/hexo">hexojs/hexo</a> 如果想要更加全面的了解Hexo，可以到其官网 <a href="https://hexo.io/">Hexo</a> 了解更多的细节，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。这里，默认各位猿/媛儿都知道GitHub就不再赘述。</p>
<p><strong>这是我的个人博客效果:</strong> <a href="http://iamwr.com/">吴润 · RunDouble</a></p>
<p>下面正式从零开始搭建年轻人的第一个网站。</p>
<h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a><strong>搭建步骤：</strong></h2><ul>
<li>获得个人网站域名</li>
<li>GitHub创建个人仓库</li>
<li>安装Git</li>
<li>安装Node.js</li>
<li>安装Hexo</li>
<li>推送网站</li>
<li>绑定域名</li>
<li>更换主题</li>
<li>初识MarkDown语法</li>
<li>发布文章</li>
<li>寻找图床</li>
<li>个性化设置</li>
<li>其他</li>
<li>附录</li>
</ul>
<p><strong>获得个人网站域名</strong></p>
<p>域名是网站的入口，也是网站的第一印象，比如饿了么的官网的域名是：<a href="https://www.ele.me/">https://www.ele.me/</a> ，很是巧妙。常见的有com,cn,net,org等后缀，也有小众的xyz,me,io等后缀，根据你自己的喜好，选择不同的后缀，比如我选择就是常见的com后缀。很多小众奇特的后缀在大陆是没办法备案的，网站也就无法上线。然而使用GitHub托管我们的网站，完全不需要备案，因为托管我们的网站内容的服务器在美国，而且在国内备案流程也比较繁杂，时间需要一周左右。</p>
<p>申请域名的地方有很多，这里推荐阿里云：<a href="https://www.aliyun.com/">阿里云-为了无法计算的价值</a> 申请入口：<a href="https://wanwang.aliyun.com/domain/">域名注册</a> 购买域名这也是我们整个搭建过程中惟一一个需要花钱的地方。如果你已经有了空闲域名就无需购买，直接使用即可。</p>
<p><strong>GitHub创建个人仓库</strong></p>
<p>登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：<a href="https://github.com/">Build software better, together</a> 点击GitHub中的New repository创建新仓库，仓库名应该为：<strong>用户名</strong>.<a href="http://github.io/">http://github.io</a> 这个<strong>用户名</strong>使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：</p>
<p><img src="https://pic4.zhimg.com/80/v2-832168e58b4ac4ce7c3cca797711d2d3_1440w.jpg" alt="img"></p>
<p><strong>安装Git</strong></p>
<p>什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，参看<a href="http://weibo.com/liaoxuefeng">廖雪峰</a>老师的Git教程：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程</a> 从Git官网下载：<a href="https://git-scm.com/download/win">Git - Downloading Package</a> 现在的机子基本都是64位的，选择64位的安装包，下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash</p>
<p><img src="https://pic3.zhimg.com/80/v2-8b1cbe253d6e0301bd9a68c6f98a9f52_1440w.jpg" alt="img"></p>
<p>或者在菜单里搜索Git Bash，设置user.name和user.email配置信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的GitHub用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>

<p>生成ssh密钥文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p>
<p><img src="https://pic4.zhimg.com/v2-d1e47103ec1aa8675f68688c5d63bd27_r.jpg" alt="img"></p>
<p>打开<a href="https://github.com/settings/keys">GitHub_Settings_keys</a> 页面，新建new SSH Key</p>
<p><img src="https://pic1.zhimg.com/v2-72a3f22c080e99343c3cc4aabce10e3c_r.jpg" alt="img"></p>
<p>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。<br>在Git Bash中检测GitHub公钥设置是否成功，输入 ssh <a href="mailto:&#x67;&#x69;&#116;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;">&#x67;&#x69;&#116;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;</a> ：</p>
<p><img src="https://pic3.zhimg.com/v2-da481ffa686410becd4186c656b4ebd6_r.jpg" alt="img"></p>
<p>如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p>
<p><strong>安装Node.js</strong></p>
<p>Hexo基于Node.js，Node.js下载地址：<a href="https://nodejs.org/en/download/">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v :</p>
<p><img src="https://pic1.zhimg.com/80/v2-76ea38e9545e606f975781e47933b010_1440w.jpg" alt="img"></p>
<p>检测npm是否安装成功，在命令行中输入npm -v :</p>
<p><img src="https://pic2.zhimg.com/80/v2-bede250b8456df92475b455fda8c1dd9_1440w.jpg" alt="img"></p>
<p>到这了，安装Hexo的环境已经全部搭建完成。</p>
<p><strong>安装Hexo</strong></p>
<p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行</p>
<p><img src="https://pic1.zhimg.com/80/v2-a5450a466c0927c25dff8ad6f1d2046c_1440w.jpg" alt="img"></p>
<p>使用npm命令安装Hexo，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure>



<p>这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>

<p>注意，这里的命令都是作用在刚刚创建的Blog文件夹中。</p>
<p>为了检测我们的网站雏形，分别按顺序输入以下三条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new test_my_site</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>这些命令在后面作介绍，完成后，打开浏览器输入地址：</p>
<p>localhost:4000</p>
<p>可以看出我们写出第一篇博客，只不过我下图是我修改过的配置，和你的显示不一样。</p>
<p><img src="https://pic4.zhimg.com/v2-123e73c0630d299b1c856d99b04b55bb_r.jpg" alt="img"></p>
<p>现在来介绍常用的Hexo 命令</p>
<p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客</p>
<p>命令简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署</p>
<p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p>
<p>刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。</p>
<p><strong>推送网站</strong></p>
<p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点</strong>配置文件，如下图</p>
<p><img src="https://pic2.zhimg.com/v2-cb1fd5e5a2e73f513234e434724c7c55_r.jpg" alt="img"></p>
<p>进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题</strong>配置文件，如下图</p>
<p><img src="https://pic4.zhimg.com/v2-4252029e5634bf91c7d58916ae2b8ac3_r.jpg" alt="img"></p>
<p>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p>
<p>deploy:<br>type: git<br>repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git<br>branch: master参考如下：</p>
<p><img src="https://pic1.zhimg.com/v2-279ac5149b577f04dc099defbb12eaa8_r.jpg" alt="img"></p>
<p>保存站点配置文件。</p>
<p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>



<p>如果出现拒绝访问则需要<code>ping alexandermucc.github.io</code></p>
<p>若出现本地ip则需要对host配置</p>
<p><img src="C:/Users/ShengZhan/AppData/Roaming/Typora/typora-user-images/image-20210619114934169.png" alt="image-20210619114934169"></p>
<p>需要在站长工具( <a href="https://ip.tool.chinaz.com/github.io)%E4%B8%8A%E6%9F%A5%E6%89%BEgithub.io%E5%9F%9F%E5%90%8D%E7%9A%84ip%EF%BC%8C%E6%8A%8A%E8%8E%B7%E5%8F%96%E7%9A%84ip%E5%9C%A8hosts%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB">https://ip.tool.chinaz.com/github.io)上查找github.io域名的ip，把获取的ip在hosts文件中添加对应关系</a></p>
<p><strong>解决途径</strong>：修改本地hosts文件（位置：C:/windows/system32/drivers/etc/hosts）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> GitHub Start</span></span><br><span class="line">185.199.111.153		binance-docs.github.io</span><br><span class="line">52.74.223.119     github.com</span><br><span class="line">192.30.253.119    gist.github.com</span><br><span class="line">54.169.195.247    api.github.com</span><br><span class="line">185.199.111.153   assets-cdn.github.com</span><br><span class="line">151.101.76.133    raw.githubusercontent.com</span><br><span class="line"><span class="meta">#</span><span class="bash"> GitHub End</span></span><br></pre></td></tr></table></figure>

<p>这时，我们分别输入三条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href="http://xxxx.github.io/">http://xxxx.github.io</a> (知乎排版可能会出现”http://“字样，参考下图) 比如我的xxxx就是我的GitHub用户名：</p>
<p><img src="https://pic1.zhimg.com/80/v2-d750452f4258bf0967d5629ef23d1b10_1440w.jpg" alt="img"></p>
<p>你就会发现你的博客已经上线了，可以在网络上被访问了。</p>
<p><strong>绑定域名</strong></p>
<p>虽然在Internet上可以访问我们的网站，但是网址是GitHub提供的:<a href="http://xxxx.github.io/">http://xxxx.github.io</a> (知乎排版可能会出现”http://“字样) 而我们想使用我们自己的个性化域名，这就需要绑定我们自己的域名。这里演示的是在阿里云万网的域名绑定，在国内主流的域名代理厂商也就阿里云和腾讯云。登录到阿里云，进入管理控制台的域名列表，找到你的个性化域名，进入解析</p>
<p><img src="https://pic3.zhimg.com/v2-47323ad4490e206aef93a3d68f0670b6_r.jpg" alt="img"></p>
<p>然后添加解析</p>
<p><img src="https://pic3.zhimg.com/v2-40222b3a295bb692aac22829a8ec3be2_r.jpg" alt="img"></p>
<p>包括添加三条解析记录，192.30.252.153是GitHub的地址，你也可以ping你的 <a href="http://xxxx.github.io/">http://xxxx.github.io</a> 的ip地址，填入进去。第三个记录类型是CNAME，CNAME的记录值是：你的用户名.<a href="http://github.io/">http://github.io</a> 这里千万别弄错了。第二步，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p>
<p><img src="https://pic4.zhimg.com/v2-85ba6dda906f22dea4c03df2b47d994b_r.jpg" alt="img"></p>
<p>点击save保存。第三步，进入本地博客文件夹 ，进入blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www。这里我还是写了www(不建议带有www):</p>
<p><img src="https://pic1.zhimg.com/v2-79abfff91af3f520e24cb91acf6aa994_r.jpg" alt="img"></p>
<p>保存，命名为CNAME ，注意保存成<strong>所有文件</strong>而不是<strong>txt文件</strong>。</p>
<p>完成这三步，进入blog目录中，按住shift键右击打开命令行，依次输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cleanhexo ghexo d</span><br></pre></td></tr></table></figure>

<p>这时候打开浏览器在地址栏输入你的个性化域名将会直接进入你自己搭建的网站。</p>
<p><strong>更换主题</strong></p>
<p>如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：<a href="https://hexo.io/themes/">Themes</a> 我自己使用的是Next主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>这是将Next主题下载到blog目录的themes主题下的next文件夹中。打开<strong>站点</strong>的_config.yml配置文件，修改主题为next</p>
<p><img src="https://pic1.zhimg.com/v2-b1997377e82408cb15b485c65ae00f70_r.jpg" alt="img"></p>
<p>打开<strong>主题</strong>的_config.yml配置文件，不是站点主题文件，找到Scheme Settings</p>
<p><img src="https://pic2.zhimg.com/v2-1ac152c4aabe4c10b762ee27552f1105_r.jpg" alt="img"></p>
<p>next主题有三个样式，我用的是Pisces，你们可以自己试试看，选择你自己喜欢的样式（只需要把行首的#去除，#是注释），选择好后，再次部署网站，hexo g、hexo d，查看效果。选择其他主题，按照上述过程即可实现。</p>
<p><strong>初识Markdown语法</strong></p>
<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于html已经算是轻量级语言，像有道云笔记也支持Markdown写作。并且Markdown完全兼容html，也就是可以在文章里直接插入html代码。比如给博文添加音乐，就可以直接把音乐的外链html代码插入文章中。具体语法参看：<a href="http://www.appinn.com/markdown/">Markdown 语法说明(简体中文版)</a> 可以说十分钟就可以入门。当然，工欲善其事必先利其器，选择一个好的Markdown编辑器也是非常重要的，这里推荐<a href="http://code52.org/DownmarkerWPF/">MarkPad</a> 和<a href="http://www.markdownpad.com/">The Markdown Editor for Windows</a> ，这是带有预览效果的编辑器，也可以使用本地的文本编辑器，更多的Markdown的语法与编辑器自己可以搜索了解。</p>
<p><strong>发布文章</strong></p>
<p>我们开始正式发布上线博客文章，在命令行中输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&quot;博客名字&quot;</span></span><br></pre></td></tr></table></figure>



<p>我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 <strong>博客名字.md</strong> 文件，使用Markdown编辑器打开，就可以开始你的个人博客之旅了，Markdown常用的样式也就十来种，完全能够满足一般博文的样式要求，这是我的一篇博文内容示例：</p>
<p><img src="https://pic1.zhimg.com/v2-4f96cd03a88e68b8ae86c38bfb0808ac_r.jpg" alt="img"></p>
<p>通过带有预览样式的Markdown编辑器实时预览书写的博文样式，也可以通过命令 hexo s –debug 在本地浏览器的localhost:4000 预览博文效果。写好博文并且样式无误后，通过hexo g、hexo d 生成、部署网页。随后可以在浏览器中输入域名浏览。</p>
<p><strong>寻找图床</strong></p>
<p>图床，当博文中有图片时，若是少量图片，可以直接把图片存放在source文件夹中，但这显然不合理的，因为图片会占据大量的存储的空间，加载的时候相对缓慢 ，这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用Markdown语法，**<img src="C:/Users/ShengZhan/Desktop/%25E5%25A4%2596%25E9%2583%25A8%25E9%2593%25BE%25E6%258E%25A5" alt="图片信息">** 完成图片的插入，这种网站就被成为图床。常见的简易的图床网站有：<a href="http://www.tietuku.com/">贴图库图片外链</a> 国内算比较好的图床我认为有两个：新浪微博和 <a href="https://www.qiniu.com/">七牛云</a> ，七牛云的使用方法可以参看其他文章。图床最重要的就是稳定速度快，所以在挑选图床的时候一定要仔细，下图是博文插入图片，使用图床外链的示例：</p>
<p><img src="https://pic4.zhimg.com/v2-92372e522595af139ace5f371aae3ff3_r.jpg" alt="img"></p>
<p><strong>个性化设置</strong></p>
<p>所谓的个性化设置就是根据个人需要添加不同的插件及功能。</p>
<p>基本的有：</p>
<p>在站点配置文件_config.yml修改基本的站点信息</p>
<p><img src="https://pic4.zhimg.com/v2-78bc0e4e6498c9c3cb269b3254d8379f_r.jpg" alt="img"></p>
<p>依次是网站标题、副标题、网站描述、作者、网站头像外部链接、网站语言、时区等。</p>
<p>在主题配置文件_config.yml修改基本的主题信息，如：</p>
<p><img src="https://pic2.zhimg.com/80/v2-451c5cb2fd6516650ad8ca608031bf0d_1440w.jpg" alt="img"></p>
<p>博文打赏的微信、支付宝二维码图片，这里我是直接把这两张放在根目录的source文件夹中，并没有使用图床外链。</p>
<p><img src="https://pic2.zhimg.com/v2-69bbc45e973eb6916e08187ed8b33a55_r.jpg" alt="img"></p>
<p>社交外链的设置，即在侧栏展示你的个人社交网站信息。</p>
<p><img src="https://pic4.zhimg.com/v2-5b3f6e02e0d3a0cdb685a4d2fd2718cb_r.jpg" alt="img"></p>
<p>博文分享的插件jiathis，值设置为true。在配置文件中有很多的个性化设置，可以自尝试更多的修改。</p>
<p>进阶个性化：</p>
<ul>
<li>添加网易云音乐</li>
</ul>
<p>打开网页版的网易云音乐，选择喜欢的音乐，点击生成外链播放器</p>
<p><img src="https://pic2.zhimg.com/v2-fcb7d44ccdca3760c98db0d13817f2b5_r.jpg" alt="img"></p>
<p>复制外链的代码</p>
<p><img src="https://pic4.zhimg.com/v2-16eec195312cde7b1d257fac6f3c8d0b_r.jpg" alt="img"></p>
<p>比如在侧栏插入这首歌的音乐播放器，修改 blog\themes\next\layout_macro的sidebar.swig文件，添加刚刚复制的外链代码</p>
<p><img src="https://pic4.zhimg.com/v2-03db51002497b27e4d5888e0efd577c7_r.jpg" alt="img"></p>
<p>重新生成、部署网页，效果如下</p>
<p><img src="https://pic2.zhimg.com/80/v2-3d587bf919df92db38e2608f034e50f1_1440w.jpg" alt="img"></p>
<ul>
<li>设置背景</li>
</ul>
<p>把你挑选的背景图片命名为：background.jpg，放在blog\themes\next\source\images里，在blog\themes\next\source\css_custom文件的custom.styl首部添加：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;  <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">/images/background.jpg</span>);  <span class="attribute">background-attachment</span>: fixed;&#125;</span><br></pre></td></tr></table></figure>

<p>background-attachment: fixed;是固定背景图片。</p>
<p>这是设置一张静态图片作为背景，其实Next主题自带有动态的背景效果，修改主题配置文件中的canvas_nest: false为canvas_nest: true即可。</p>
<ul>
<li>增加侧栏菜单条目</li>
</ul>
<p>默认的侧栏菜单条目有：首页、归档、标签、关于、搜索等。如果你想要增加其他的菜单条目，修改主题配置文件_config.yml里的Menu Settings中的menu和menu_icons两个地方</p>
<p><img src="https://pic3.zhimg.com/v2-666a22fedbba95d979eeb26e52fc29e2_r.jpg" alt="img"></p>
<p>其中menu里是配置菜单项对应的页面位置（如：/love），menu_icons对应菜单项的图标，这里的图标是来自于<a href="http://fontawesome.io/">Font Awesome</a> ，所以你需要在Font Awesome网站上找到你需要的icon，然后把该icon的名字写在menu_icons对应菜单名后面，注意冒号有一个英文输入状态的空格。设置好后，在命令行里输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;你所要增加的菜单项名称（要和你在menu中的填写要匹配）&quot;</span></span><br></pre></td></tr></table></figure>

<p>新建的页面在博客根目录下的source文件里，这时你就可以对新建的页面自定义设计。</p>
<p>还有更多的进阶个性化设置，如SEO、评论系统、个人头像、博客分享、订阅功能、High功能、404网页设置等，可以参看：</p>
<p><a href="http://theme-next.iissnan.com/theme-settings.html">主题配置 - NexT 使用文档</a></p>
<p><a href="http://theme-next.iissnan.com/third-party-services.html">第三方服务集成 - NexT 使用文档</a></p>
<p><a href="http://theme-next.iissnan.com/tag-plugins.html">内置标签 - NexT 使用文</a></p>
<p><a href="http://theme-next.iissnan.com/tag-plugins.html">档</a><a href="http://theme-next.iissnan.com/advanced-settings.html">进阶设定 - NexT 使用文档</a></p>
<p>有很多人私信问我High功能特效如何设置，这里推荐一篇同是Next主题网站博主的文章：<a href="http://www.iamlj.com/2016/08/add-special-effect-harlem-shake-for-hexo/">为Hexo Next主题添加哈林摇特效（五）</a></p>
<p><strong>其他</strong></p>
<p>终于写到这里了，也算是基本圆满完成了我的写作初衷，总结自己的一些经验，分享一些有趣的东西，不过脖子也是僵硬的受不了。我知道很多人想要建立自己的个人网站却一直没有付诸行动，希望这篇文章能给你一点点灵感与想法，just do it。本文是windows平台的搭建过程，其他平台可以参看相关资料，也有很多其他优秀的博客框架值得学习。如果有任何建议或想法、或疑问欢迎在评论区交流， 做好的网站不妨在评论区贴出网址，让大家一起学习。</p>
<p><strong>附录</strong></p>
<p><strong>以下是评论区贴出网址的博客展示：</strong></p>
<p><a href="http://jmyblog.top/">…Miss.j BlogDiary…</a></p>
<p><a href="http://ibb.chaodamiao.com/">RILWEIC</a></p>
<p><a href="http://blog.sunxinfei.com/">Xin’s Notes</a></p>
<p><a href="https://guguant.github.io/">飞鸟与鱼</a></p>
<p><a href="http://www.fuck-goods.tk/">无名博客</a></p>
<p><a href="http://helloqa.com/">iTesting软件测试知识分享</a></p>
<p><a href="http://bolg.upsky.top/">赵小源的个人博客</a></p>
<p><a href="http://www.huajiayi.top/">华嘉熠’s Blog</a></p>
<p><a href="http://asmire.site/">Cocoon</a></p>
<p><a href="https://luoshaoxiong.github.io/">罗少雄’s Blog</a></p>
<p><a href="https://lruihao.github.io/">李四啊_</a></p>
<p><strong>其他优秀个人博客展示：</strong></p>
<p><a href="https://www.dandyweng.com/">翁天信 · Dandy Weng</a> <a href="http://chaoxuprime.com/">chaoxuprim</a> <a href="http://kenjiendo.com/">KENJI ENDO</a> <a href="http://shenzekun.cn/">Moorez</a> <a href="https://codesky.me/">CodeSky 代码之空</a> <a href="http://www.helloshawn.cn/">大江东去</a> <a href="http://iconmoon.com/">UI Design Portfolio of JJ Ying</a> <a href="http://www.jeyzhang.com/">JeyZhang</a> <a href="http://blog.lightina.cn/">jacklightChen | 得到的都是侥幸</a> <a href="https://qingpei.me/">edwardtoday</a> <a href="http://rafaltomal.com/">Rafal Tomal - Web Designer and Genesis Developer</a> <a href="http://strml.net/">Projects and Work</a> <a href="http://miaoxiaoer.com/">绘画爱好者</a> <a href="http://ursocute.github.io/">万世奇的博客</a> <a href="https://rauchg.com/">Guillermo Rauch</a></p>
<p><strong>相关文章：</strong></p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/58654392">Hexo 从 GitHub 到阿里云</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/archives/0.html</url>
    <content><![CDATA[<h1 id="Java容器"><a href="#Java容器" class="headerlink" title="Java容器"></a>Java容器</h1><p>主要介绍Java中的数据结构<code>Collection接口</code>中的两个子类<code>List、Set</code>以及<code>Map</code></p>
<span id="more"></span>



<ul>
<li><code>List</code>(对付顺序的好帮手)： 存储的元素是<strong>有序的</strong>、<strong>可重复的。</strong><ul>
<li><code>Arraylist</code>： <code>Object[]</code>数组</li>
<li><code>Vector</code>：<code>Object[]</code>数组</li>
<li><code>LinkedList</code>： 双向链表(JDK1.6 之前为循环链表，JDK1.7 取消了循环)</li>
</ul>
</li>
<li><code>Set</code>(注重独一无二的性质): 存储的元素是<strong>无序的</strong>、<strong>不可重复的。</strong><ul>
<li><code>HashSet</code>（无序，唯一）: 基于 <code>HashMap</code> 实现的，底层采用 <code>HashMap</code> 来保存元素</li>
<li><code>LinkedHashSet</code>：<code>LinkedHashSet</code> 是 <code>HashSet</code> 的子类，并且其内部是通过 <code>LinkedHashMap</code> 来实现的。有点类似于我们之前说的 <code>LinkedHashMap</code> 其内部是基于 <code>HashMap</code> 实现一样，不过还是有一点点区别的</li>
<li><code>TreeSet</code>（有序，唯一）： 红黑树(自平衡的排序二叉树)</li>
</ul>
</li>
<li><code>Map</code>(用 Key 来搜索的专家): 使用键值对（key-value）存储，类似于数学上的函数 y=f(x)，“x”代表 key，”y”代表 value，**<code>Key</code> 是无序的、不可重复的<strong>，</strong><code>value</code> 是无序的、可重复的**，每个键最多映射到一个值。<ul>
<li><code>HashMap</code>： JDK1.8 之前 <code>HashMap</code> 由数组+链表组成的，数组是 <code>HashMap</code> 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间</li>
<li><code>LinkedHashMap</code>： <code>LinkedHashMap</code> 继承自 <code>HashMap</code>，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，<code>LinkedHashMap</code> 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。详细可以查看：<a href="https://www.imooc.com/article/22931">《LinkedHashMap 源码详细分析（JDK1.8）》</a></li>
<li><code>Hashtable</code>： 数组+链表组成的，数组是 <code>Hashtable</code> 的主体，链表则是主要为了解决哈希冲突而存在的</li>
<li><code>TreeMap</code>： 红黑树（自平衡的排序二叉树）</li>
</ul>
</li>
</ul>
<h2 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h2><h3 id="Arraylist-和-Vector-的区别"><a href="#Arraylist-和-Vector-的区别" class="headerlink" title="Arraylist 和 Vector 的区别?"></a>Arraylist 和 Vector 的区别?</h3><ul>
<li><code>ArrayList</code> 是 <code>List</code> 的主要实现类，底层使用 <code>Object[ ]</code>存储，适用于频繁的查找工作，<strong>线程不安全</strong> ；</li>
<li><code>Vector</code> 是 <code>List</code> 的古老实现类，底层使用<code>Object[ ]</code> 存储，<strong>线程安全</strong>的。</li>
</ul>
<h3 id="Arraylist-与-LinkedList-区别"><a href="#Arraylist-与-LinkedList-区别" class="headerlink" title="Arraylist 与 LinkedList 区别?"></a>Arraylist 与 LinkedList 区别?</h3><ol>
<li><p><strong>都不能保证线程安全：</strong> <code>ArrayList</code> 和 <code>LinkedList</code> 都是不同步的，也就是不保证线程安全；</p>
</li>
<li><p><strong>底层数据结构：</strong></p>
<ul>
<li><p> <code>Arraylist</code> 底层使用的是 <strong><code>Object</code> 数组</strong>；</p>
</li>
<li><p><code>LinkedList</code> 底层使用的是 <strong>双向链表</strong> </p>
<blockquote>
<p>数据结构（JDK1.6 之前为循环链表，JDK1.7 取消了循环。注意双向链表和双向循环链表的区别，下面有介绍到！）</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>插入和删除是否受元素位置的影响</strong>：</p>
<ul>
<li><code>ArrayList</code> 采用数组存储，所以<strong>插入和删除元素的时间复杂度受元素位置的影响</strong>。 </li>
<li><code>LinkedList</code> 采用链表存储<ul>
<li>如果是在<strong>头尾插入或者删除元素不受元素位置的影响</strong></li>
<li>如果是要在<strong>指定位置 <code>i</code> 插入和删除元素的话时间复杂度近似为 O(n)</strong> ，因为需要先移动到指定位置再插入。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>是否支持快速随机访问</strong> </p>
<ol>
<li><code>LinkedList</code> 不支持高效的随机元素访问，</li>
<li> <code>ArrayList</code> 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于<code>get(int index)</code>方法)。</li>
</ol>
</li>
<li><p><strong>内存空间占用：</strong> </p>
<ol>
<li>ArrayList 的空间浪费主要体现在在 list <strong>列表的结尾会预留一定的容量空间</strong></li>
<li> LinkedList 的空间花费则体现在它的<strong>每一个元素都需要消耗比 ArrayList 更多的空间</strong>（因为要存放直接后继和直接前驱以及数据）。</li>
</ol>
</li>
</ol>
<h3 id="ArrayList-的扩容机制吧"><a href="#ArrayList-的扩容机制吧" class="headerlink" title="ArrayList 的扩容机制吧"></a>ArrayList 的扩容机制吧</h3><p><code>ArrayList</code>类下</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/archives/0.html</url>
    <content><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><blockquote>
<p><strong>代理对象来代替对真实对象(real object)的访问</strong>，<strong>不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能</strong></p>
</blockquote>
<p><strong>主要作用：</strong>是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。</p>
<span id="more"></span>

<h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实际使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SmsService smsService = <span class="keyword">new</span> SmsServiceImpl();</span><br><span class="line">        SmsProxy smsProxy = <span class="keyword">new</span> SmsProxy(smsService);</span><br><span class="line">        smsProxy.send(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义发送短信的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SmsService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">send</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现发送短信的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsServiceImpl</span> <span class="keyword">implements</span> <span class="title">SmsService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;send message:&quot;</span> + message);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建代理类并同样实现发送短信的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsProxy</span> <span class="keyword">implements</span> <span class="title">SmsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SmsService smsService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsProxy</span><span class="params">(SmsService smsService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.smsService = smsService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法之前，我们可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before method send()&quot;</span>);</span><br><span class="line">        smsService.send(message);</span><br><span class="line">        <span class="comment">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after method send()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行上述代码之后，控制台打印出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">before method send()</span><br><span class="line">send message:java</span><br><span class="line">after method send()</span><br></pre></td></tr></table></figure>



<p>对目标对象的每个方法的增强都是手动完成的,需要对每个目标类都单独写一个代理类</p>
<p><strong>静态代理实现步骤:</strong></p>
<ol>
<li>定义一个接口及其实现类；</li>
<li>创建一个代理类同样实现这个接口</li>
<li>将目标对象注入进代理类，然后在代理类的对应方法调用目标类中的对应方法。这样的话，我们就可以通过代理类屏蔽对目标对象的访问，并且可以在目标方法执行前后做一些自己想做的事情。</li>
</ol>
<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><blockquote>
<p>不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类</p>
<p><strong>动态代理是在运行时动态生成类字节码，并加载到 JVM 中的</strong></p>
</blockquote>
<p>动态代理的实现方式有很多种，比如 <strong>JDK 动态代理</strong>、<strong>CGLIB 动态代理</strong></p>
<p><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/basis/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3">参考文章</a></p>
<h2 id="JDK-动态代理机制"><a href="#JDK-动态代理机制" class="headerlink" title="JDK 动态代理机制"></a>JDK 动态代理机制</h2><blockquote>
<p><strong>在 Java 动态代理机制中 <code>InvocationHandler</code> 接口和 <code>Proxy</code> 类是核心。</strong></p>
</blockquote>
<h3 id="JDK-动态代理类使用步骤"><a href="#JDK-动态代理类使用步骤" class="headerlink" title="JDK 动态代理类使用步骤"></a>JDK 动态代理类使用步骤</h3><ol>
<li><strong>定义一个接口及其实现类；</strong></li>
<li>自定义 <code>InvocationHandler</code> 并<strong>重写<code>invoke</code>方法</strong>，在 <code>invoke</code> 方法中我们会<strong>调用原生方法</strong>（被代理类的方法）并自定义一些处理逻辑；</li>
<li>通过 <code>Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code> 方法创建代理对象；</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实际使用</span></span><br><span class="line">SmsService smsService = (SmsService) JdkProxyFactory.getProxy(<span class="keyword">new</span> SmsServiceImpl());</span><br><span class="line">smsService.send(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义发送短信的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SmsService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">send</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现发送短信的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsServiceImpl</span> <span class="keyword">implements</span> <span class="title">SmsService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;send message:&quot;</span> + message);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个 JDK 动态代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DebugInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理类中的真实对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DebugInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法之前，我们可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before method &quot;</span> + method.getName());</span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        <span class="comment">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after method &quot;</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取代理对象的工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxyFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(), <span class="comment">// 目标类的类加载</span></span><br><span class="line">                target.getClass().getInterfaces(),  <span class="comment">// 代理需要实现的接口，可指定多个</span></span><br><span class="line">                <span class="keyword">new</span> DebugInvocationHandler(target)   <span class="comment">// 代理对象对应的自定义 InvocationHandler</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//getProxy() ：主要通过Proxy.newProxyInstance（）方法获取某个类的代理对象</span></span><br></pre></td></tr></table></figure>

<p>运行上述代码之后，控制台打印出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">before method send</span><br><span class="line">send message:java</span><br><span class="line">after method send</span><br></pre></td></tr></table></figure>





<h2 id="CGLIB-动态代理机制"><a href="#CGLIB-动态代理机制" class="headerlink" title="CGLIB 动态代理机制"></a>CGLIB 动态代理机制</h2><blockquote>
<p><strong>JDK 动态代理</strong>有一个最致命的问题是其<u>只能代理实现了接口的类</u>。</p>
<p>为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。</p>
</blockquote>
<blockquote>
<p><a href="https://github.com/cglib/cglib">CGLIB</a>(<em>Code Generation Library</em>)是一个基于<a href="http://www.baeldung.com/java-asm">ASM</a>的字节码生成库，它允许我们在运行时对<strong>字节码进行修改和动态生成</strong>。CGLIB 通过<strong>继承方式实现代理</strong>。很多知名的开源框架都使用到了<a href="https://github.com/cglib/cglib">CGLIB</a>， 例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理</p>
</blockquote>
<p><strong>在 CGLIB 动态代理机制中 <code>MethodInterceptor</code> 接口和 <code>Enhancer</code> 类是核心。</strong></p>
<p>你需要自定义 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法。</p>
<h3 id="CGLIB-动态代理类使用步骤"><a href="#CGLIB-动态代理类使用步骤" class="headerlink" title="CGLIB 动态代理类使用步骤"></a>CGLIB 动态代理类使用步骤</h3><ol>
<li><p>定义一个类；</p>
</li>
<li><p>自定义 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法，和 JDK 动态代理中的 <code>invoke</code> 方法类似；</p>
</li>
<li><p>通过 <code>Enhancer</code> 类的 <code>create()</code>创建代理类；</p>
</li>
</ol>
<p><a href="https://github.com/cglib/cglib">CGLIB</a>属于一个开源项目，如果你要使用它的话，需要手动添加相关依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实际使用</span></span><br><span class="line">AliSmsService aliSmsService = (AliSmsService) CglibProxyFactory.getProxy(AliSmsService.class);</span><br><span class="line">aliSmsService.send(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现一个使用阿里云发送短信的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliSmsService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;send message:&quot;</span> + message);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义 MethodInterceptor（方法拦截器）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DebugMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o           被代理的对象（需要增强的对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method      被拦截的方法（需要增强的方法）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args        方法入参</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodProxy 用于调用原始方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法之前，我们可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before method &quot;</span> + method.getName());</span><br><span class="line">        Object object = methodProxy.invokeSuper(o, args);</span><br><span class="line">        <span class="comment">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after method &quot;</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxy</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建动态代理增强类</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">// 设置类加载器</span></span><br><span class="line">        enhancer.setClassLoader(clazz.getClassLoader());</span><br><span class="line">        <span class="comment">// 设置被代理类</span></span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line">        <span class="comment">// 设置方法拦截器</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> DebugMethodInterceptor());</span><br><span class="line">        <span class="comment">// 创建代理类</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">before method send</span><br><span class="line">send message:java</span><br><span class="line">after method send</span><br></pre></td></tr></table></figure>





<h2 id="JDK-动态代理和-CGLIB-动态代理对比"><a href="#JDK-动态代理和-CGLIB-动态代理对比" class="headerlink" title="JDK 动态代理和 CGLIB 动态代理对比"></a>JDK 动态代理和 CGLIB 动态代理对比</h2><ol>
<li><strong>JDK 动态代理只能只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。</strong> </li>
<li>效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。</li>
</ol>
<h1 id="静态代理和动态代理的对比"><a href="#静态代理和动态代理的对比" class="headerlink" title="静态代理和动态代理的对比"></a>静态代理和动态代理的对比</h1><ol>
<li><strong>灵活性</strong> ：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！</li>
<li><strong>JVM 层面</strong> ：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 <strong>class 文件</strong>。而动态代理是在运行时动态生成<strong>类字节码</strong>，并加载到 JVM 中的。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/archives/0.html</url>
    <content><![CDATA[<p>浪潮之巅</p>
<p>Java技术体系</p>
<ol>
<li>Java程序设计语言</li>
<li>JVM</li>
<li>Java API类库</li>
<li>辅助工具  如javac</li>
</ol>
<p>1+2+3+4=JDK</p>
<p>2+3=JRE</p>
<p>Java技术体系</p>
<p>JavaSE JavaEE JavaME</p>
<p>JavaEE框架</p>
<ul>
<li>Spring大家族</li>
</ul>
<p>《数据结构》</p>
<p>剑指offer <strong>必看</strong></p>
<p>大话数据结构</p>
<p>大话数据结构<br>剑指offer<br>编程之美<br>编程珠玑<br>Leetcode </p>
<p>第一：《C Primer Plus》(第5版）中文版  买新版<br>第二：《C++Primer》中文版<br>第三：《C++ Primer Plus》 比第二更适合零基础<br>第四：《Java编程思想》<br>第五：《Java核心技术》卷1卷2<br>第六：《Python核心编程》<br>第七：《Python编程从入门到实战》<br>第八：《Go语言实战》 or《Go In Action》<br>第九：《算法导论》 不适合初学者<br>第十：《算法》第四版 红色<br>第十一：《TCP/IP详解》<br>第十二：《计算机网络 自顶向下》<br>第十三：《私房菜》  工具书<br>第十四：《Unix环境高级编程》<br>第十五：《Spring实战》<br>第十六：《Spring Boot实战》<br>第十七：《Spring技术内幕》 很难<br>第十八：《MySQL必知必会》   涵盖 《SQL必知必会》的内容<br>第十九：《高性能MySQL》<br>第二十：《重构 改善既有代码的设计》 需要一些经验，拔高内容</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/archives/0.html</url>
    <content><![CDATA[<h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624762507074/image-20210627105506208.png" alt="image-20210627105506208"></p>
<p>StringBuilder和StringBuffer</p>
<p>StringBuilder是线程安全</p>
<h2 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a><strong>抽象类和接口的区别</strong></h2><ol>
<li>抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。</li>
<li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 <strong>public static final</strong> 类型的。</li>
<li>接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。</li>
<li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li>
</ol>
<h2 id="Java数据结构"><a href="#Java数据结构" class="headerlink" title="Java数据结构"></a>Java数据结构</h2><h3 id="传统遗留"><a href="#传统遗留" class="headerlink" title="传统遗留"></a>传统遗留</h3><ul>
<li>枚举（Enumeration）</li>
<li>位集合（BitSet）</li>
<li>向量（Vector）</li>
<li>栈（Stack）</li>
<li>字典（Dictionary）</li>
<li>哈希表（Hashtable）</li>
<li>属性（Properties）</li>
</ul>
<h4 id="Java-Enumeration接口"><a href="#Java-Enumeration接口" class="headerlink" title="Java Enumeration接口"></a>Java Enumeration接口</h4><blockquote>
<p>这种传统接口已被迭代器取代。尽管如此，它还是使用在诸如Vector和Properties这些传统类所定义的方法中</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left"><strong>序号</strong></th>
<th align="center"><strong>方法描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="center"><strong>boolean hasMoreElements( )</strong>  测试此枚举是否包含更多的元素。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="center"><strong>Object nextElement( )</strong> 如果此枚举对象至少还有一个可提供的元素，则返回此枚举的下一个元素。</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumerationTester</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      Enumeration&lt;String&gt; days;</span><br><span class="line">      Vector&lt;String&gt; dayNames = <span class="keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line">      dayNames.add(<span class="string">&quot;Sunday&quot;</span>);</span><br><span class="line">      dayNames.add(<span class="string">&quot;Monday&quot;</span>);</span><br><span class="line">      dayNames.add(<span class="string">&quot;Tuesday&quot;</span>);</span><br><span class="line">      dayNames.add(<span class="string">&quot;Wednesday&quot;</span>);</span><br><span class="line">      dayNames.add(<span class="string">&quot;Thursday&quot;</span>);</span><br><span class="line">      dayNames.add(<span class="string">&quot;Friday&quot;</span>);</span><br><span class="line">      dayNames.add(<span class="string">&quot;Saturday&quot;</span>);</span><br><span class="line">      days = dayNames.elements();</span><br><span class="line">      <span class="keyword">while</span> (days.hasMoreElements())&#123;</span><br><span class="line">         System.out.println(days.nextElement()); </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上实例编译运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sunday</span><br><span class="line">Monday</span><br><span class="line">Tuesday</span><br><span class="line">Wednesday</span><br><span class="line">Thursday</span><br><span class="line">Friday</span><br><span class="line">Saturday</span><br></pre></td></tr></table></figure>



<h4 id="Java-Bitset类"><a href="#Java-Bitset类" class="headerlink" title="Java Bitset类"></a>Java Bitset类</h4><blockquote>
<p>个Bitset类创建一种特殊类型的数组来保存位值。BitSet中数组大小会随需要增加。这和位向量（vector of bits）比较类似。</p>
<p>这是一个传统的类，但它在Java 2中被完全重新设计。</p>
</blockquote>
<p><strong>实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.BitSet;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitSetDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">     BitSet bits1 = <span class="keyword">new</span> BitSet(<span class="number">16</span>);</span><br><span class="line">     BitSet bits2 = <span class="keyword">new</span> BitSet(<span class="number">16</span>);</span><br><span class="line">      </span><br><span class="line">     <span class="comment">// set some bits</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>((i%<span class="number">2</span>) == <span class="number">0</span>) bits1.set(i);</span><br><span class="line">        <span class="keyword">if</span>((i%<span class="number">5</span>) != <span class="number">0</span>) bits2.set(i);</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println(<span class="string">&quot;Initial pattern in bits1: &quot;</span>);</span><br><span class="line">     System.out.println(bits1);</span><br><span class="line">     System.out.println(<span class="string">&quot;\nInitial pattern in bits2: &quot;</span>);</span><br><span class="line">     System.out.println(bits2);</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// AND bits</span></span><br><span class="line">     bits2.and(bits1);</span><br><span class="line">     System.out.println(<span class="string">&quot;\nbits2 AND bits1: &quot;</span>);</span><br><span class="line">     System.out.println(bits2);</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// OR bits</span></span><br><span class="line">     bits2.or(bits1);</span><br><span class="line">     System.out.println(<span class="string">&quot;\nbits2 OR bits1: &quot;</span>);</span><br><span class="line">     System.out.println(bits2);</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// XOR bits</span></span><br><span class="line">     bits2.xor(bits1);</span><br><span class="line">     System.out.println(<span class="string">&quot;\nbits2 XOR bits1: &quot;</span>);</span><br><span class="line">     System.out.println(bits2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上实例编译运行结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Initial pattern in bits1:</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>&#125;</span><br><span class="line"></span><br><span class="line">Initial pattern in bits2:</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>&#125;</span><br><span class="line"></span><br><span class="line">bits2 AND bits1:</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">14</span>&#125;</span><br><span class="line"></span><br><span class="line">bits2 OR bits1:</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>&#125;</span><br><span class="line"></span><br><span class="line">bits2 XOR bits1:</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Java-Vector-类"><a href="#Java-Vector-类" class="headerlink" title="Java Vector 类"></a>Java Vector 类</h4><blockquote>
<p>Vector 类实现了一个<strong>动态数组</strong>。和 ArrayList 很相似，但是两者是不同的：</p>
<ul>
<li>Vector 是同步访问的。</li>
<li>Vector 包含了许多传统的方法，这些方法<strong>不属于集合框架。</strong></li>
</ul>
<p>Vector 主要用在事先不知道数组的大小，或者只是需要一个可以改变大小的数组的情况。</p>
</blockquote>
<p><strong>实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VectorDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      <span class="comment">// initial size is 3, increment is 2</span></span><br><span class="line">      Vector v = <span class="keyword">new</span> Vector(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Initial size: &quot;</span> + v.size());</span><br><span class="line">      System.out.println(<span class="string">&quot;Initial capacity: &quot;</span> +</span><br><span class="line">      v.capacity());</span><br><span class="line">      v.addElement(<span class="keyword">new</span> Integer(<span class="number">1</span>));</span><br><span class="line">      v.addElement(<span class="keyword">new</span> Integer(<span class="number">2</span>));</span><br><span class="line">      v.addElement(<span class="keyword">new</span> Integer(<span class="number">3</span>));</span><br><span class="line">      v.addElement(<span class="keyword">new</span> Integer(<span class="number">4</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;Capacity after four additions: &quot;</span> +</span><br><span class="line">          v.capacity());</span><br><span class="line"></span><br><span class="line">      v.addElement(<span class="keyword">new</span> Double(<span class="number">5.45</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;Current capacity: &quot;</span> +</span><br><span class="line">      v.capacity());</span><br><span class="line">      v.addElement(<span class="keyword">new</span> Double(<span class="number">6.08</span>));</span><br><span class="line">      v.addElement(<span class="keyword">new</span> Integer(<span class="number">7</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;Current capacity: &quot;</span> +</span><br><span class="line">      v.capacity());</span><br><span class="line">      v.addElement(<span class="keyword">new</span> Float(<span class="number">9.4</span>));</span><br><span class="line">      v.addElement(<span class="keyword">new</span> Integer(<span class="number">10</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;Current capacity: &quot;</span> +</span><br><span class="line">      v.capacity());</span><br><span class="line">      v.addElement(<span class="keyword">new</span> Integer(<span class="number">11</span>));</span><br><span class="line">      v.addElement(<span class="keyword">new</span> Integer(<span class="number">12</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;First element: &quot;</span> +</span><br><span class="line">         (Integer)v.firstElement());</span><br><span class="line">      System.out.println(<span class="string">&quot;Last element: &quot;</span> +</span><br><span class="line">         (Integer)v.lastElement());</span><br><span class="line">      <span class="keyword">if</span>(v.contains(<span class="keyword">new</span> Integer(<span class="number">3</span>)))</span><br><span class="line">         System.out.println(<span class="string">&quot;Vector contains 3.&quot;</span>);</span><br><span class="line">      <span class="comment">// enumerate the elements in the vector.</span></span><br><span class="line">      Enumeration vEnum = v.elements();</span><br><span class="line">      System.out.println(<span class="string">&quot;\nElements in vector:&quot;</span>);</span><br><span class="line">      <span class="keyword">while</span>(vEnum.hasMoreElements())</span><br><span class="line">         System.out.print(vEnum.nextElement() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">      System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>以上实例编译运行结果如下：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Initial size: 0</span><br><span class="line">Initial capacity: 3</span><br><span class="line">Capacity after four additions: 5</span><br><span class="line">Current capacity: 5</span><br><span class="line">Current capacity: 7</span><br><span class="line">Current capacity: 9</span><br><span class="line">First element: 1</span><br><span class="line">Last element: 12</span><br><span class="line">Vector contains 3.</span><br><span class="line"></span><br><span class="line">Elements in vector:</span><br><span class="line">1 2 3 4 5.45 6.08 7 9.4 10 11 12</span><br></pre></td></tr></table></figure>



<h4 id="Java-Stack-类"><a href="#Java-Stack-类" class="headerlink" title="Java Stack 类"></a>Java Stack 类</h4><blockquote>
<p>栈是Vector的一个子类，它实现了一个标准的后进先出的栈</p>
</blockquote>
<p>实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showpush</span><span class="params">(Stack&lt;Integer&gt; st, <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        st.push(<span class="keyword">new</span> Integer(a));</span><br><span class="line">        System.out.println(<span class="string">&quot;push(&quot;</span> + a + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;stack: &quot;</span> + st);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showpop</span><span class="params">(Stack&lt;Integer&gt; st)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;pop -&gt; &quot;</span>);</span><br><span class="line">        Integer a = (Integer) st.pop();</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;stack: &quot;</span> + st);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; st = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;stack: &quot;</span> + st);</span><br><span class="line">        showpush(st, <span class="number">42</span>);</span><br><span class="line">        showpush(st, <span class="number">66</span>);</span><br><span class="line">        showpush(st, <span class="number">99</span>);</span><br><span class="line">        showpop(st);</span><br><span class="line">        showpop(st);</span><br><span class="line">        showpop(st);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            showpop(st);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (EmptyStackException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;empty stack&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上实例编译运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stack: [ ]</span><br><span class="line">push(42)</span><br><span class="line">stack: [42]</span><br><span class="line">push(66)</span><br><span class="line">stack: [42, 66]</span><br><span class="line">push(99)</span><br><span class="line">stack: [42, 66, 99]</span><br><span class="line">pop -&gt; 99</span><br><span class="line">stack: [42, 66]</span><br><span class="line">pop -&gt; 66</span><br><span class="line">stack: [42]</span><br><span class="line">pop -&gt; 42</span><br><span class="line">stack: [ ]</span><br><span class="line">pop -&gt; empty stack</span><br></pre></td></tr></table></figure>



<h4 id="Java-Dictionary-类"><a href="#Java-Dictionary-类" class="headerlink" title="Java Dictionary 类"></a>Java Dictionary 类</h4><blockquote>
<p>Dictionary 类是一个<strong>抽象类</strong>，用来<strong>存储键/值对</strong>，作用和Map类相似。</p>
<p>给出键和值，你就可以将值存储在Dictionary对象中。一旦该值被存储，就可以通过它的键来获取它。所以和Map一样， Dictionary 也可以作为一个键/值对列表。</p>
<p><strong>Dictionary类已经过时了</strong></p>
</blockquote>
<h4 id="Java-Hashtable-类"><a href="#Java-Hashtable-类" class="headerlink" title="Java Hashtable 类"></a>Java Hashtable 类</h4><blockquote>
<p>是一个Dictionary具体的实现 。它和HashMap类很相似，但是它<strong>支持同步。</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashTableDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Create a hash map</span></span><br><span class="line">      Hashtable balance = <span class="keyword">new</span> Hashtable();</span><br><span class="line">      Enumeration names;</span><br><span class="line">      String str;</span><br><span class="line">      <span class="keyword">double</span> bal;</span><br><span class="line"></span><br><span class="line">      balance.put(<span class="string">&quot;Zara&quot;</span>, <span class="keyword">new</span> Double(<span class="number">3434.34</span>));</span><br><span class="line">      balance.put(<span class="string">&quot;Mahnaz&quot;</span>, <span class="keyword">new</span> Double(<span class="number">123.22</span>));</span><br><span class="line">      balance.put(<span class="string">&quot;Ayan&quot;</span>, <span class="keyword">new</span> Double(<span class="number">1378.00</span>));</span><br><span class="line">      balance.put(<span class="string">&quot;Daisy&quot;</span>, <span class="keyword">new</span> Double(<span class="number">99.22</span>));</span><br><span class="line">      balance.put(<span class="string">&quot;Qadir&quot;</span>, <span class="keyword">new</span> Double(-<span class="number">19.08</span>));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Show all balances in hash table.</span></span><br><span class="line">      names = balance.keys();</span><br><span class="line">      <span class="keyword">while</span>(names.hasMoreElements()) &#123;</span><br><span class="line">         str = (String) names.nextElement();</span><br><span class="line">         System.out.println(str + <span class="string">&quot;: &quot;</span> +</span><br><span class="line">         balance.get(str));</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line">      <span class="comment">// Deposit 1,000 into Zara&#x27;s account</span></span><br><span class="line">      bal = ((Double)balance.get(<span class="string">&quot;Zara&quot;</span>)).doubleValue();</span><br><span class="line">      balance.put(<span class="string">&quot;Zara&quot;</span>, <span class="keyword">new</span> Double(bal+<span class="number">1000</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;Zara&#x27;s new balance: &quot;</span> +</span><br><span class="line">      balance.get(<span class="string">&quot;Zara&quot;</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上实例编译运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Qadir: -19.08</span><br><span class="line">Zara: 3434.34</span><br><span class="line">Mahnaz: 123.22</span><br><span class="line">Daisy: 99.22</span><br><span class="line">Ayan: 1378.0</span><br><span class="line"></span><br><span class="line">Zara&#x27;s new balance: 4434.34</span><br></pre></td></tr></table></figure>



<h4 id="Java-Properties-类"><a href="#Java-Properties-类" class="headerlink" title="Java Properties 类"></a>Java Properties 类</h4><blockquote>
<p>Properties 继承于 Hashtable。表示一个<strong>持久的属性集</strong>.属性列表中每个键及其对应值都是一个字符串。</p>
<p>Properties 类被许多 Java 类使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      Properties capitals = <span class="keyword">new</span> Properties();</span><br><span class="line">      Set states;</span><br><span class="line">      String str;</span><br><span class="line">      </span><br><span class="line">      capitals.put(<span class="string">&quot;Illinois&quot;</span>, <span class="string">&quot;Springfield&quot;</span>);</span><br><span class="line">      capitals.put(<span class="string">&quot;Missouri&quot;</span>, <span class="string">&quot;Jefferson City&quot;</span>);</span><br><span class="line">      capitals.put(<span class="string">&quot;Washington&quot;</span>, <span class="string">&quot;Olympia&quot;</span>);</span><br><span class="line">      capitals.put(<span class="string">&quot;California&quot;</span>, <span class="string">&quot;Sacramento&quot;</span>);</span><br><span class="line">      capitals.put(<span class="string">&quot;Indiana&quot;</span>, <span class="string">&quot;Indianapolis&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// Show all states and capitals in hashtable.</span></span><br><span class="line">      states = capitals.keySet(); <span class="comment">// get set-view of keys</span></span><br><span class="line">      Iterator itr = states.iterator();</span><br><span class="line">      <span class="keyword">while</span>(itr.hasNext()) &#123;</span><br><span class="line">         str = (String) itr.next();</span><br><span class="line">         System.out.println(<span class="string">&quot;The capital of &quot;</span> +</span><br><span class="line">            str + <span class="string">&quot; is &quot;</span> + capitals.getProperty(str) + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// look for state not in list -- specify default</span></span><br><span class="line">      str = capitals.getProperty(<span class="string">&quot;Florida&quot;</span>, <span class="string">&quot;Not Found&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;The capital of Florida is &quot;</span></span><br><span class="line">          + str + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上实例编译运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The capital of Missouri is Jefferson City.</span><br><span class="line">The capital of Illinois is Springfield.</span><br><span class="line">The capital of Indiana is Indianapolis.</span><br><span class="line">The capital of California is Sacramento.</span><br><span class="line">The capital of Washington is Olympia.</span><br><span class="line"></span><br><span class="line">The capital of Florida is Not Found.</span><br></pre></td></tr></table></figure>



<h3 id="Java2引入Collection"><a href="#Java2引入Collection" class="headerlink" title="Java2引入Collection"></a>Java2引入Collection</h3>]]></content>
  </entry>
  <entry>
    <title>Java基础之前端学习</title>
    <url>/archives/6c84e79c.html</url>
    <content><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。<strong>用来描述网页的一种语言</strong></p>
<ul>
<li>HTML 指的是超文本标记语言: <strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage</li>
<li>HTML 不是一种编程语言，而是一种<strong>标记</strong>语言</li>
<li>标记语言是一套<strong>标记标签</strong> (markup tag)</li>
<li>HTML 使用标记标签来<strong>描述</strong>网页</li>
<li>HTML 文档包含了HTML <strong>标签</strong>及<strong>文本</strong>内容</li>
<li>HTML文档也叫做 <strong>web 页面</strong></li>
</ul>
<table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="https://www.runoob.com/tags/tag-html.html"><html></a></td>
<td align="center">定义 HTML 文档</td>
</tr>
<tr>
<td align="center"><a href="https://www.runoob.com/tags/tag-body.html"><body></a></td>
<td align="center">定义文档的主体</td>
</tr>
<tr>
<td align="center"><a href="https://www.runoob.com/tags/tag-hn.html"><h1>-<h6></a></td>
<td align="center">定义 HTML 标题</td>
</tr>
<tr>
<td align="center"><a href="https://www.runoob.com/tags/tag-hr.html"><hr></a></td>
<td align="center">定义水平线</td>
</tr>
<tr>
<td align="center"><a href="https://www.runoob.com/tags/tag-comment.html"><!----></a></td>
<td align="center">定义注释</td>
</tr>
<tr>
<td align="center"><a href="https://www.runoob.com/tags/tag-p.html"><p></a></td>
<td align="center">定义一个段落</td>
</tr>
<tr>
<td align="center"><a href="https://www.runoob.com/tags/tag-br.html"><br></a></td>
<td align="center">插入单个折行（换行）</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/archives/0.html</url>
    <content><![CDATA[<h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><h1 id="abstract关键字"><a href="#abstract关键字" class="headerlink" title="abstract关键字"></a>abstract关键字</h1><p><strong>抽象类</strong></p>
<blockquote>
<p>该关键字声明的类是抽象类</p>
<p><strong>目的</strong>是为了将来对该类进行扩充</p>
<p><strong>有抽象方法的类一定是抽象类，抽象类不一定有抽象方法</strong></p>
</blockquote>
<p><strong>抽象方法</strong></p>
<ul>
<li>抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。</li>
<li>抽象方法不能被声明成 final 和 static。</li>
<li>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。</li>
<li>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。</li>
</ul>
<h1 id="synchronized-修饰符"><a href="#synchronized-修饰符" class="headerlink" title="synchronized 修饰符"></a>synchronized 修饰符</h1><p>synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。</p>
<h1 id="transient-修饰符"><a href="#transient-修饰符" class="headerlink" title="transient 修饰符"></a>transient 修饰符</h1><p><strong>序列化的对象</strong>包含被 transient 修饰的实例变量时，java 虚拟机(JVM)<strong>跳过该特定的变量</strong>。</p>
<p>该修饰符包含在定义变量的语句中，用来<strong>预处理类和变量的数据类型</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">transient</span> <span class="keyword">int</span> limit = <span class="number">55</span>;   <span class="comment">// 不会持久化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> b; <span class="comment">// 持久化</span></span><br></pre></td></tr></table></figure>



<h1 id="volatile-修饰符"><a href="#volatile-修饰符" class="headerlink" title="volatile 修饰符"></a>volatile 修饰符</h1><p>volatile 修饰的成员变量在<strong>每次被线程访问</strong>时，都强制从共享内存中<strong>重新读取该成员变量的值</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> active;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        active = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (active) <span class="comment">// 第一行</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        active = <span class="keyword">false</span>; <span class="comment">// 第二行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码中我们使用了 volatile 修饰 active，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 每次调用时会发生变化，该循环会停止。</p>
]]></content>
  </entry>
  <entry>
    <title>Java基础知识-面试知识</title>
    <url>/archives/c112d770.html</url>
    <content><![CDATA[<p>文章该内容是关于面试中的知识点的复习</p>
<span id="more"></span>



<h1 id="二、Java"><a href="#二、Java" class="headerlink" title="二、Java"></a>二、Java</h1><h2 id="2-1-Java基础"><a href="#2-1-Java基础" class="headerlink" title="2.1 Java基础"></a>2.1 Java基础</h2><h3 id="2-1-1-⾯向对象和⾯向过程的区别"><a href="#2-1-1-⾯向对象和⾯向过程的区别" class="headerlink" title="2.1.1. ⾯向对象和⾯向过程的区别"></a>2.1.1. ⾯向对象和⾯向过程的区别</h3><table>
<thead>
<tr>
<th>名称\特点</th>
<th>性能</th>
<th align="center">易维护、易复用、易扩展</th>
</tr>
</thead>
<tbody><tr>
<td>面向过程</td>
<td>高</td>
<td align="center">No</td>
</tr>
<tr>
<td>面向对象</td>
<td>低</td>
<td align="center">Yes</td>
</tr>
</tbody></table>
<p><strong>性能原因</strong>：</p>
<ul>
<li>最主要是因为面向对象是半编译半解释型语言，先把源代码编译成字节码，再通过JVM解释执行字节码转换为机器码。</li>
<li>面向过程只需要将源代码</li>
</ul>
<p><strong>易维护、易复用、易扩展</strong>：</p>
<p>由于面向对象具有封装、继承、多态性的特性，因此可以设计出低耦合的系统，使系统更加灵活、更加易于维护。</p>
<h3 id="2-1-2-Java-语言有哪些特点"><a href="#2-1-2-Java-语言有哪些特点" class="headerlink" title="2.1.2. Java 语言有哪些特点?"></a>2.1.2. Java 语言有哪些特点?</h3><ol start="2">
<li>面向对象（封装，继承，多态）；</li>
<li>平台无关性（ Java 虚拟机实现平台无关性）；</li>
<li>可靠性、安全性；</li>
<li><strong>⽀持多线程</strong>；</li>
<li>支持<strong>网络编程</strong></li>
<li><strong>编译与解释并存</strong>；</li>
</ol>
<h3 id="2-1-3-JVM-JDK-和-JRE"><a href="#2-1-3-JVM-JDK-和-JRE" class="headerlink" title="2.1.3 JVM JDK 和 JRE"></a>2.1.3 JVM JDK 和 JRE</h3><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="OSI、TCP-IP、五层协议体系结构"><a href="#OSI、TCP-IP、五层协议体系结构" class="headerlink" title="OSI、TCP/IP、五层协议体系结构"></a>OSI、TCP/IP、五层协议体系结构</h2><p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624591130331/image-20210625111848432.png" alt="image-20210625111848432"></p>
<p><strong>OSI</strong>  </p>
<blockquote>
<ul>
<li>7层（应用层、表示层、会话层、运输层、网络层、传输层、数据链路层、物理层、）</li>
<li>一种<strong>概念模型</strong>，由<a href="https://baike.baidu.com/item/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E5%8C%96%E7%BB%84%E7%BB%87/779832">国际标准化组织</a>提出，一个试图使各种计算机在世界范围内互连为网络的<strong>标准框架</strong></li>
<li>基本的功能：提供给开发者一个必须的、通用的概念以便开发完善、可以用来解释<strong>连接不同系统的框架</strong></li>
</ul>
</blockquote>
<p><strong>TCP/IP</strong></p>
<blockquote>
<p>4层：应用层、运输层、网际层、网络连接层</p>
</blockquote>
<p><strong>五层协议体系结构</strong></p>
<blockquote>
<ul>
<li>综合OSI和TCP/IP的优点，采取一种只有五层协议的体系结构，这样既简洁又能将概念阐述清楚</li>
<li><strong>五层协议体系结构</strong>:为了介绍网络原理而设计的,实际应用还是采用TCP/IP四层体系结构</li>
</ul>
</blockquote>
<p><strong>⽆论是哪⼀层的数据单元，都可笼统地⽤“分组”来表示</strong></p>
<p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624593895208/2021010409370574.gif" alt="img"></p>
<hr>
<p><strong>应用层</strong></p>
<ul>
<li><p>通过应⽤进程间的交互来<strong>完成特定⽹络应⽤</strong></p>
</li>
<li><p>应⽤进程（进程：主机中正在运⾏的程序）间的<strong>通信和交互的规则</strong></p>
</li>
<li><p>**报⽂:**应⽤层交互的数据单元</p>
</li>
</ul>
<p><strong>应用层协议</strong></p>
<p>域名系统DNS</p>
<blockquote>
<p>域名和IP地址相互映射的⼀个<strong>分布式数据库</strong></p>
</blockquote>
<p>HTTP协议</p>
<blockquote>
<ul>
<li>所有的 WWW（万维⽹） ⽂件都必须遵守这个标准</li>
<li>提供⼀种发布和接收 HTML ⻚⾯的⽅法</li>
</ul>
</blockquote>
<p>SMTP协议</p>
<blockquote>
<p>邮件分发协议</p>
</blockquote>
<hr>
<p><strong>传输层</strong></p>
<blockquote>
<ul>
<li>两台主机进程之间的通信提供<strong>通⽤的数据传输服务</strong></li>
<li><strong>“通⽤的”</strong>是指并不针对某⼀个特定的⽹络应⽤，⽽是多种应⽤可以使⽤同⼀个运输层服务</li>
<li><strong>复⽤</strong>就是指多个应⽤层进程可同时使⽤下⾯运输层的服务<br><strong>分发</strong>是运输层把收到的信息分别交付上⾯应⽤层中的相应进程</li>
</ul>
</blockquote>
<p><strong>传输层协议</strong></p>
<p>传输控制协议 TCP</p>
<blockquote>
<p>提供<strong>⾯向连接</strong>的，<strong>可靠</strong>的数据传输服务</p>
</blockquote>
<p>⽤户数据协议 UDP</p>
<blockquote>
<p>提供<strong>⽆连接的</strong>，尽最⼤努⼒的数据传输服务（<strong>不保证数据传输的可靠性</strong>）</p>
</blockquote>
<hr>
<p><strong>网络层</strong></p>
<blockquote>
<ul>
<li><strong>选择合适的⽹间路由和交换结点， 确保数据及时传送</strong>。⽹络层把运输层产⽣的<u>报⽂段</u>或⽤户数据报封装成<u>分组和包</u>进⾏传送。</li>
<li>由于⽹络层使⽤ <strong>IP 协议</strong>，因此分组也叫 <strong>IP 数据报</strong> ，简称 <strong>数据报</strong>。</li>
<li>互联⽹是由⼤量的<strong>异构（heterogeneous）⽹络</strong>通过路由器（router）相互连接起来的。互联⽹使⽤的⽹络层协议是⽆连接的⽹际协议（Intert Protocol）和许多路由选择协议，因此互联⽹的⽹络层也叫做<strong>⽹际层或IP层</strong></li>
<li>异构：<u>两个或以上</u>的无线通信系统采用了不同的<strong>接入技术</strong>，或者是采用相同的无线接入技术但属于<strong>不同的无线运营商</strong></li>
</ul>
</blockquote>
<hr>
<p><strong>数据链路层</strong></p>
<blockquote>
<ul>
<li>也叫链路层。两台主机之间的数据传输，总是在⼀段⼀段的链路上传送的，这就需要使⽤专⻔的链路层的协议</li>
<li>数据链路层<strong>将⽹络层交下来的 IP 数据报组装成帧</strong></li>
<li><strong>每⼀帧</strong>包括<u>数据和必要的控制信息</u>（如同步信息，地址信息，差错控制等）<ul>
<li>控制信息使接收端知道每帧的比特长度</li>
<li>控制信息检测帧的错误</li>
</ul>
</li>
</ul>
</blockquote>
<hr>
<p><strong>物理层</strong></p>
<blockquote>
<ul>
<li>物理层上所传送的数据单位是<strong>⽐特</strong></li>
<li>实现相邻计算机节点之间⽐特流的<strong>透明传送</strong>，尽可能<strong>屏蔽掉具体传输介质和物理设备的差异</strong></li>
</ul>
</blockquote>
<hr>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1>]]></content>
      <categories>
        <category>java基础知识</category>
      </categories>
      <tags>
        <tag>java学习</tag>
        <tag>java基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>vue错误</title>
    <url>/archives/450ca8b4.html</url>
    <content><![CDATA[<h2 id="vue错误"><a href="#vue错误" class="headerlink" title="vue错误"></a>vue错误</h2><p>本文旨在学习vue框架时，所遇到的坑。</p>
<span id="more"></span>

<h3 id="1-typeError-Cannot-read-property-‘-createElement’-of-undefined"><a href="#1-typeError-Cannot-read-property-‘-createElement’-of-undefined" class="headerlink" title="1 typeError: Cannot read property ‘$createElement’ of undefined"></a>1 typeError: Cannot read property ‘$createElement’ of undefined</h3><p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624434632191/image-20210623155031102.png" alt="image-20210623155031102"></p>
<p><strong>解决：</strong></p>
<p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624434744179/image-20210623155222932.png" alt="image-20210623155222932"></p>
<h3 id="2-vue-init-webpack-hello-vue-卡在download-template中"><a href="#2-vue-init-webpack-hello-vue-卡在download-template中" class="headerlink" title="2 vue init webpack hello-vue 卡在download template中"></a>2 vue init webpack hello-vue 卡在download template中</h3><p><strong>1. 可能是hosts镜像的问题</strong></p>
<p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624440160945/image-20210623172239819.png" alt="image-20210623172239819"></p>
<p><strong>可通过<a href="http://tool.chinaz.com/dns/">站长工具</a>查询合适的ip，替换</strong></p>
<p><strong>修改hosts文件中下面地址的ip</strong></p>
<p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624440388399/image-20210623172627311.png" alt="image-20210623172627311"></p>
<p><strong>参考ip：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">13.229.188.59     github.com</span><br><span class="line">243.185.187.39    gist.github.com</span><br><span class="line">192.30.255.117    api.github.com</span><br><span class="line">185.199.111.153   assets-cdn.github.com</span><br><span class="line">185.199.110.133   raw.githubusercontent.com```</span><br></pre></td></tr></table></figure>

<p><strong>2.述方法不能使用，我是通过更改网络，手机开热点才能解决</strong></p>
<p><strong>3. Module build failed: TypeError: this.getOptions is not a function</strong></p>
<p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624462315193/image-20210623233152727.png" alt="image-20210623233152727"></p>
<p>这个问题主要是因为node-loader版本过高导致的问题，我们尝试将版本降低到@7.3.1</p>
<p><strong>直接使用命令：<code>npm install sass-loader@7.3.1 --save-dev</code></strong> 降低版本号</p>
<p><strong>再进行<code>npm run dev</code>即可运行出现Module build failed: Error: Cannot find module ‘node-sass’</strong></p>
<p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624462563949/image-20210623233602813.png" alt="image-20210623233602813"></p>
<p>执行命令安装<code>cnpm install node-sass --save</code>出现<strong>Module build failed: Error: Node Sass version 6.0.0 is incompatible with ^4.0.0.</strong></p>
<p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624462667270/image-20210623233746127.png" alt="image-20210623233746127"></p>
<p>问题其实指明的很明显了，就是说@6.0.0版本过高了，需要换成@4.x版本的</p>
<p><strong>这里我们降版本到@4.14.1 （<code>npm install node-sass@4.14.1 --save-dev</code>）</strong></p>
<p>执行命令<code>npm run dev</code>完成</p>
<p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624462763498/image-20210623233922572.png" alt="image-20210623233922572"></p>
]]></content>
      <categories>
        <category>Error</category>
      </categories>
      <tags>
        <tag>java学习</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习</title>
    <url>/archives/317b894e.html</url>
    <content><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><p>Vue是一个前端框架，方便后端开发者理解。如果想快速搭建，可参考第十二章的运行。如果出错可查看本博客的Vue错误中的文档。</p>
<span id="more"></span>

<h1 id="一、Vue介绍"><a href="#一、Vue介绍" class="headerlink" title="一、Vue介绍"></a>一、Vue介绍</h1><p><strong>1. 百科定义</strong>：</p>
<ul>
<li>一款<strong>渐进式</strong> JavaScript 框架，所谓渐进式就是<strong>逐步实现新特性</strong>的意思，如实现模块化开发、路由、状态管理等新特性。</li>
<li>特点是综合了 <strong>Angular（模块化）</strong>和<strong>React(虚拟 DOM)</strong> 的优点。</li>
<li><a href="https://blog.csdn.net/qq_46138160/article/details/111028492">VUE详细介绍</a></li>
</ul>
<p><strong>2. 解决什么问题</strong>：</p>
<p>基于<code>Soc</code>(关注度分离原则)，让前后端的职责更清晰，分工更合理高效</p>
<p><strong>3. 为什么这个技术会出现</strong></p>
<p>前端的语言太乱太杂没有一个统一的管理。类似于maven</p>
<h1 id="二、VUE的基本语法"><a href="#二、VUE的基本语法" class="headerlink" title="二、VUE的基本语法"></a>二、VUE的基本语法</h1><h2 id="1-v-bin"><a href="#1-v-bin" class="headerlink" title="1. v-bin"></a>1. v-bin</h2><blockquote>
<p>绑定元素特性。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 导入vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">       <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// Model:数据</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">           <span class="attr">message</span>:<span class="string">&quot;hello,vue!&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>从<code>&lt;span&gt;</code>标签可看，通过声明一个<code>title</code>绑定<code>VUE</code>对象中的<code>message</code>。</strong></p>
<h2 id="2-v-if-v-else-v-else-if"><a href="#2-v-if-v-else-v-else-if" class="headerlink" title="2. v-if,v-else,v-else-if"></a>2. v-if,v-else,v-else-if</h2><blockquote>
<p>条件判断：将<code>&quot;&quot;</code>中的内容当做<code>()</code>处理，如果是布尔类型则为真，如果是其他类型如字符类型，需要用**<code>===</code>**比较判断</p>
</blockquote>
<h2 id="3-v-if-v-else"><a href="#3-v-if-v-else" class="headerlink" title="3. v-if,v-else"></a>3. v-if,v-else</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;type&quot;</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;data===&#x27;ok&#x27;&quot;</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 导入vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">/*Model：数据*/</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">data</span>:<span class="string">&quot;ok&quot;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-v-if-v-else-v-else-if"><a href="#4-v-if-v-else-v-else-if" class="headerlink" title="4. v-if,v-else,v-else-if"></a>4. v-if,v-else,v-else-if</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;type===&#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type===&#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type===&#x27;D&#x27;&quot;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>C<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 导入vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">/*Model：数据*/</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="string">&#x27;A&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-v-for"><a href="#5-v-for" class="headerlink" title="5. v-for"></a>5. v-for</h2><blockquote>
<p>遍历VUE中的元素</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;item.message&#125;&#125;---&#123;&#123;index&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 导入vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">/*Model：数据*/</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">items</span>:[</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">message</span>:<span class="string">&#x27;狂神说Java&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">message</span>:<span class="string">&#x27;狂神说前端&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">message</span>:<span class="string">&#x27;狂神说运维&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript">      ]</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-v-on"><a href="#6-v-on" class="headerlink" title="6. v-on"></a>6. v-on</h2><blockquote>
<p>监听事件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span>click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 导入vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>:<span class="string">&#x27;Hello World&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">sayHi</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//&#x27;this&#x27;在方法里面指向当前Vue实例</span></span></span><br><span class="line"><span class="javascript">        alert(<span class="built_in">this</span>.message);</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="三、双向绑定事件"><a href="#三、双向绑定事件" class="headerlink" title="三、双向绑定事件"></a>三、双向绑定事件</h1><blockquote>
<p>双向绑定事件v-model</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">单行文本</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span><br><span class="line">    输入的文本：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app1&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">message</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多行文本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">    多行文本：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>多行文本是：&#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app2&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">message</span>:<span class="string">&quot;Hello hello!&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--单复选框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app3&quot;</span>&gt;</span></span><br><span class="line">    单复选框：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123;checked&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app3&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">checked</span>:<span class="literal">false</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多复选框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app4&quot;</span>&gt;</span></span><br><span class="line">    多复选框：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jack&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jack&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;jack&quot;</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;join&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Join&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;join&quot;</span>&gt;</span>Join<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mike&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mike&quot;</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>选中的值：&#123;&#123;checkedNames&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app4&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">checkedNames</span>:[]</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--单选框按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app5&quot;</span>&gt;</span></span><br><span class="line">    单选框按钮</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span> <span class="attr">value</span>=<span class="string">&quot;One&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;one&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Two&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;two&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>选中的值：&#123;&#123;picked&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app5&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">picked</span>:<span class="string">&#x27;Two&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--下拉框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app6&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    性别：</span></span><br><span class="line"><span class="comment">        &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot; v-model=&quot;pan&quot;&gt;男</span></span><br><span class="line"><span class="comment">        &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot; v-model=&quot;pan&quot;&gt;女</span></span><br><span class="line"><span class="comment">        &lt;p&gt;选中了：&#123;&#123;pan&#125;&#125;&lt;/p&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    下拉框:</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;pan&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">disabled</span>&gt;</span>---请选择---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>D<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>value:&#123;&#123;pan&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app6&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">pan</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>VUE和前端的数据会同时发生变化。</p>
<p>注意：<code>v-model</code>会忽略所有表单元素的<code>value</code>、<code>checked</code>、<code>selected</code>特性的初始值而总是将<code>Vue</code>实例的数据作为数据来源。通过<code>JavaScript</code>在组件的<code>data</code>选项中声明初始值!</p>
<h1 id="四、组件"><a href="#四、组件" class="headerlink" title="四、组件"></a>四、组件</h1><blockquote>
<p>自定义模板，可以理解自定义标签类型。</p>
</blockquote>
<p>使用<code>Vue.component()</code>方法注册组件。</p>
<p>需要给<code>自定义组件名字</code>和<code>组件的模板</code></p>
<p>组件需要用props属性对读到的属性进行绑定才能显示。</p>
<p>即 绑定<code>属性item</code>给<code>组件pan</code>的<code>panh</code>属性。该<code>组件pan</code>才能访问原来Vue中的值<code>item</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1. 组件的基本使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1.组件的基本使用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pan</span>&gt;</span><span class="tag">&lt;/<span class="name">pan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用Vue.component()方法注册组件</span></span><br><span class="line"><span class="comment">      注册组件需要给名字和模板</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&quot;pan&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">template</span>:<span class="string">&#x27;&lt;li&gt;Hello&lt;/li&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="comment">//实例化Vue</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">&quot;#app1&quot;</span></span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2 传递参数到组件</span></span><br><span class="line"><span class="comment">    使用props属性传递参数</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>2 传递参数到组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--组件：传递给组件中的值：props--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pan</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:panh</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">pan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">//定义组件</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&quot;pan&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">props</span>:[<span class="string">&#x27;panh&#x27;</span>],</span></span><br><span class="line"><span class="javascript">    <span class="attr">template</span>:<span class="string">&#x27;&lt;li&gt;&#123;&#123;panh&#125;&#125;&lt;/li&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">&quot;#app2&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">items</span>:[<span class="string">&quot;java&quot;</span>,<span class="string">&quot;Linux&quot;</span>,<span class="string">&quot;前端&quot;</span>]</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="五、Axios"><a href="#五、Axios" class="headerlink" title="五、Axios"></a>五、Axios</h1><blockquote>
<p>由于<code>Vue.js</code>是一个视图层框架并且作者(尤雨溪) 严格准守<code>SoC(关注度分离原则)</code>所以<code>Vue.js</code>并不包含AJAX的通信功能， 为了解决通信问题， 作者单独开发了一个名为<code>vue-resource</code>的插件， 不过在进入2.0版本以后停止了对该插件的维护并推荐了<code>Axios框架</code>。少用<code>jQuery</code>， 因为它操作Dom太频繁!</p>
</blockquote>
<p>需要借助于<code>mounted()</code>钩子函数调用<code>AXIOS请求</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:v-binf</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--v-cloak 解决闪烁问题--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vue&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>地名：&#123;&#123;info.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>地址：&#123;&#123;info.address.country&#125;&#125;--&#123;&#123;info.address.city&#125;&#125;--&#123;&#123;info.address.street&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>链接：</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-for</span>=<span class="string">&quot;(name,index) in info.links&quot;</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;name.url&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123;&#123;index&#125;&#125;,&#123;&#123;name.name&#125;&#125;,&#123;&#123;name.url&#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  &lt;a v-bind:href=&quot;info.url&quot;&gt;click me&lt;/a&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入js文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">&quot;#vue&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">//data：属性：vm</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">info</span>:&#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>:<span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">address</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">country</span>:<span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">city</span>:<span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">street</span>:<span class="literal">null</span></span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="attr">links</span>: [&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>:<span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>:<span class="literal">null</span></span></span><br><span class="line"><span class="javascript">          &#125;]</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;<span class="comment">//钩子函数</span></span></span><br><span class="line"><span class="javascript">      axios.get(<span class="string">&#x27;../data.json&#x27;</span>).then(<span class="function"><span class="params">response</span>=&gt;</span>(<span class="built_in">this</span>.info=response.data));</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="六、计算属性"><a href="#六、计算属性" class="headerlink" title="六、计算属性"></a>六、计算属性</h1><blockquote>
<p>能够将计算结果缓存起来的属性(将行为转化成了静态的属性)。类似缓存</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 计算属性的主要特性就是为了将不经常变化的计算结果进行缓存，以节约我们的系统开销 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层，模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>currentTime1:&#123;&#123;currentTime1()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>currentTime2:&#123;&#123;currentTime2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--1.导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>:<span class="string">&quot;pan&quot;</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">currentTime1</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">Date</span>.now();<span class="comment">//返回一个时间戳</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">currentTime2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//计算属性：methods，computed方法名不能重名，重名之后，只会调用methods的方法</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.message;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">Date</span>.now();<span class="comment">//返回一个时间戳</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ul>
<li><p><code>methods</code>，<code>computed</code>方法名不能重名，重名之后，只会调用<code>methods</code>的方法</p>
</li>
<li><p><code>methods</code>执行的是<code>方法</code>。<code>conputed</code>执行的是<code>属性</code></p>
</li>
</ul>
<p><strong>计算属性的主要特性就是为了将不经常变化的计算结果进行缓存，以节约我们的系统开销；</strong></p>
<h1 id="七、内容分发"><a href="#七、内容分发" class="headerlink" title="七、内容分发"></a>七、内容分发</h1><blockquote>
<p>使用<code>&lt;slot&gt;</code>元素作为承载分发内容的出口，作者称其为插槽，可以应用在组合组件的场景中。类似自我组装组件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--将原来的标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>代办事项<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>学习狂神说Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--变成可以更改的标签类型</span></span><br><span class="line"><span class="comment">		用&lt;slot&gt;标签代替</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>再将<code>&lt;slot&gt;</code>标签通过<code>Vue.component</code>组件化处理。<code>&lt;slot&gt;</code>标签绑定组件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;todo_title&#x27;,&#123;</span><br><span class="line">        props:[&#x27;title&#x27;],</span><br><span class="line">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Vue.component(&#x27;todo_list&#x27;,&#123;</span><br><span class="line">        props:[&#x27;item&#x27;,&#x27;index&#x27;],</span><br><span class="line">        template:&#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;index+1&#125;&#125;,&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层，模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo_title</span> <span class="attr">slot</span>=<span class="string">&quot;todo_title&quot;</span> <span class="attr">title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo_title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo_list</span> <span class="attr">slot</span>=<span class="string">&quot;todo_list&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo_list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    Vue.component(&#x27;todo&#x27;,&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:&#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo_title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo_list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    Vue.component(&#x27;todo_title&#x27;,&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        props:[&#x27;title&#x27;],</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    Vue.component(&#x27;todo_list&#x27;,&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        props:[&#x27;item&#x27;,&#x27;index&#x27;],</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:&#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">index</span>+<span class="number">1</span>&#125;&#125;</span><span class="xml">,</span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        el:&quot;#vue&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            title:&#x27;标题&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            items:[&#x27;demo01&#x27;,&#x27;demo02&#x27;,&#x27;demo03&#x27;]</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="八、自定义组件"><a href="#八、自定义组件" class="headerlink" title="八、自定义组件"></a>八、自定义组件</h1><blockquote>
<p>参数传递与事件分发。</p>
<p>使用this.$emit(‘自定义事件名’， 参数)</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用来和Vue实例对象进行交互，例如删除操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层，模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo_title</span> <span class="attr">slot</span>=<span class="string">&quot;todo_title&quot;</span> <span class="attr">title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo_title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo_list</span> <span class="attr">slot</span>=<span class="string">&quot;todo_list&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-on:remove</span>=<span class="string">&quot;removeItems(index)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo_list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;todo&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;\</span></span></span><br><span class="line"><span class="string"><span class="javascript">                &lt;slot name=&quot;todo_title&quot;&gt;&lt;/slot&gt;\</span></span></span><br><span class="line"><span class="string"><span class="javascript">                &lt;ul&gt;\</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;slot name=&quot;todo_list&quot;&gt;&lt;/slot&gt;\</span></span></span><br><span class="line"><span class="string"><span class="javascript">                &lt;/ul&gt;\</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;todo_title&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;todo_list&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">props</span>:[<span class="string">&#x27;item&#x27;</span>,<span class="string">&#x27;index&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="attr">template</span>:<span class="string">&#x27;&lt;li&gt;&#123;&#123;index+1&#125;&#125;,&#123;&#123;item&#125;&#125;&lt;button v-on:click=&quot;remove_method&quot;&gt;删除&lt;/button&gt;&lt;/li&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">remove_method</span>:<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">/*alert(&quot;删除操作&quot;)*/</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//this.$emit 自定义事件分发</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;remove&#x27;</span>,index);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#vue&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">title</span>:<span class="string">&#x27;标题&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">items</span>:[<span class="string">&#x27;demo01&#x27;</span>,<span class="string">&#x27;demo02&#x27;</span>,<span class="string">&#x27;demo03&#x27;</span>]</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">removeItems</span>:<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;删除了&quot;</span>+<span class="built_in">this</span>.items[index]+<span class="string">&quot;OK&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.items.splice(index,<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>上述解析如下</strong></p>
<ol>
<li>对于上面<code>内容分发</code>中的<li></li>标签中新增一个删除功能</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;index_p+1&#125;&#125;,&#123;&#123;item_p&#125;&#125; <span class="tag">&lt;<span class="name">button</span> &gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>对该组件<code>todo-items</code><strong>绑定点击事件</strong><code>remove</code>,用<code>@click</code>表示，并<strong>创建remove方法</strong>。</p>
<p>==<strong>注意</strong>==<code>@</code>和<code>v-on</code>有同样的效果。<strong>即<code>@click</code>与 <code>v-on:click</code>等同</strong></p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&quot;todo-items&quot;,&#123;</span><br><span class="line">       props:[&quot;item_p&quot;,&quot;index_p&quot;],</span><br><span class="line">       template:&quot;<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;index_p+1&#125;&#125;,&#123;&#123;item_p&#125;&#125; <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;remove&#x27;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&quot;,</span><br><span class="line">       methods:&#123;</span><br><span class="line">           remove:function () &#123;</span><br><span class="line">						alert(&quot;删除操作&quot;)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<p>此时，组件<code>todo-items</code>可以执行点击事件</p>
<p><strong>接下来需要让<li>标签能执行删除操作</strong>，即需要把Vue对象的方法绑定 到自定义组件<code>todo-items</code>中，需要==<strong>用<code>this.$emit(&#39;remove&#39;,index)</code></strong>====<strong>将Vue对象的方法绑定 到自定义组件<code>todo-items</code>中=</strong>==</p>
<ol>
<li><p>在Vue对象中创建点击事件<code>removeItems</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el:&quot;#vue&quot;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        title:&#x27;标题&#x27;,</span><br><span class="line">        items:[&#x27;demo01&#x27;,&#x27;demo02&#x27;,&#x27;demo03&#x27;]</span><br><span class="line">        &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        removeItems:function (index) &#123;</span><br><span class="line">            console.log(&quot;删除了&quot;+this.items[index]+&quot;OK&quot;);</span><br><span class="line">            this.items.splice(index,1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>视图层中<strong>绑定</strong><code>Vue</code>的事件<code>removeItems</code>，通过<code> v-on:remove=&quot;removeItems(index)&quot;</code>实现，此时的remove算一个中介可以让自定义组件<code>todo-items</code>绑定Vue中的事件，通过<code>this.$emit(&#39;remove&#39;,index)</code><strong>实现</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--view层，模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo_title</span> <span class="attr">slot</span>=<span class="string">&quot;todo_title&quot;</span> <span class="attr">title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo_title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo_list</span> <span class="attr">slot</span>=<span class="string">&quot;todo_list&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-on:remove</span>=<span class="string">&quot;removeItems(index)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo_list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;todo_list&#x27;,&#123;</span><br><span class="line">        props:[&#x27;item&#x27;,&#x27;index&#x27;],</span><br><span class="line">        template:&#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;index+1&#125;&#125;,&#123;&#123;item&#125;&#125;<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;remove_method&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            remove_method:function (index) &#123;</span><br><span class="line">                /*alert(&quot;删除操作&quot;)*/</span><br><span class="line">                //this.$emit 自定义事件分发</span><br><span class="line">                this.$emit(&#x27;remove&#x27;,index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="九、vue-cli"><a href="#九、vue-cli" class="headerlink" title="九、vue-cli"></a>九、vue-cli</h1><blockquote>
<p>vue-cli官方提供的一个脚手架，用于快速生成一个vue的项目模板</p>
</blockquote>
<p>需要的环境</p>
<ul>
<li>Node.js：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a><br>安装就是无脑的下一步就好，安装在自己的环境目录下<a href="https://blog.csdn.net/xinpz/article/details/81871785">node.js的安装配置</a></li>
<li>Git：<a href="https://git-scm.com/doenloads">https://git-scm.com/doenloads</a><br>镜像：<a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a></li>
</ul>
<p>运行vue-cli</p>
<ol>
<li><p>创建<code>vue-cli</code>的运行目录</p>
</li>
<li><p><code>cmd</code>命令行跳到该目录执行<code>vue init webpack myvue</code></p>
<blockquote>
<p>myvue是文件名</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd myvue</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p><img src="https://img2020.cnblogs.com/blog/2357123/202106/2357123-20210604001823813-2100369677.png" alt="image-20210604001822419"></p>
</li>
<li><p>上述cmd代码执行后会生成类似tomcat的服务器界面</p>
</li>
</ol>
<p><img src="https://img2020.cnblogs.com/blog/2357123/202106/2357123-20210604001800462-131582293.png" alt="image-20210604001758540"></p>
<h1 id="十、webpack"><a href="#十、webpack" class="headerlink" title="十、webpack"></a>十、webpack</h1><blockquote>
<p>webpack：现代JavaScript应用程序的<strong>静态模块打包器</strong>(module bundler)</p>
</blockquote>
<h2 id="1-安装Webpack"><a href="#1-安装Webpack" class="headerlink" title="1.安装Webpack"></a>1.安装Webpack</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br><span class="line">npm install webpack-cli -g</span><br></pre></td></tr></table></figure>

<p>查看是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">webpack -v</span><br><span class="line">webpack-cli -v</span><br></pre></td></tr></table></figure>

<h2 id="2-使用webpack"><a href="#2-使用webpack" class="headerlink" title="2.使用webpack"></a>2.使用webpack</h2><p><strong>1. 创建一个js文件，用于编写JS模块相关代码。类似于类的编写</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//暴露一个方法：sayHi</span></span><br><span class="line"><span class="built_in">exports</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;h1&gt;Hello Webpack&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. 创建一个入口函数。类似于main方法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//require 导入一个模块，就可以调用这个模块中的方法了</span></span><br><span class="line"><span class="keyword">var</span> hello = <span class="built_in">require</span>(<span class="string">&quot;./hello&quot;</span>);</span><br><span class="line">hello.sayHi()</span><br></pre></td></tr></table></figure>

<p>可以把hello当作一个对象。require是node.js遵循CommonsJS规范。该规范==<strong>核心思想</strong>==是允许模块<strong>通过require方法</strong>来<u>同步加载所需依赖的其它模块</u>，然后<strong>通过exports或module.exports</strong>来<u>导出需要暴露的接口</u>。</p>
<p><strong>3. 创建webpack.config.js配置文件，使用webpack命令打包</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./modules/request.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;./js1/bundle.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>新版本需要加上<code>mode:&#39;development&#39;</code></strong></p>
<p>在idea下方Terminal中输入<code>webpack</code>命令打包</p>
<p><img src="https://img2020.cnblogs.com/blog/2357123/202106/2357123-20210604003151298-1723353653.png" alt="image-20210604003149748"></p>
<p><strong>4. 通过创建index.html中可以导入打包好的js文件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/js1/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img2020.cnblogs.com/blog/2357123/202106/2357123-20210604003417319-1093693064.png" alt="image-20210604003415800"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 参数--watch 用于监听变化webpack --watch</span></span><br></pre></td></tr></table></figure>

<p>当js文件发生变化时，输入<code>webpack --watch</code>可以自动打包</p>
<h1 id="十一、-路由"><a href="#十一、-路由" class="headerlink" title="十一、 路由"></a>十一、 路由</h1><blockquote>
<p>vue-route</p>
</blockquote>
<p>Vue Router是Vue.js官方的路由管理器。它和Vue.js的核心深度集成， 让构建单页面应用变得易如反掌。包含</p>
<ul>
<li>嵌套的路由/视图表</li>
<li>模块化的、基于组件的路由配置</li>
<li>路由参数、查询、通配符</li>
<li>基于Vue js过渡系统的视图过渡效果</li>
<li>细粒度的导航控制</li>
<li>带有自动激活的CSS class的链接</li>
<li>HTML5 历史模式或hash模式， 在IE 9中自动降级</li>
<li>自定义的滚动行为</li>
</ul>
<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>输入下面命令<code>npm install vue-router --save-dev</code>安装</p>
<p>如果在一个模块化工程中使用它，必须要通过Vue.use()明确地安装路由功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br></pre></td></tr></table></figure>



<h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><p><strong><code>components</code> 目录下定义一个<code>Content.vue</code> 的组件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;h1&gt;内容页&lt;/h1&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name:&quot;Content&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong><code>Main.vue</code>组件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name:&quot;Main&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>在<code>src</code>目录下，新建一个文件夹：<code>router</code>。配置路由<code>index.js</code></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span><span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//导入路由插件</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//导入上面定义的组件</span></span><br><span class="line"><span class="keyword">import</span> Content <span class="keyword">from</span> <span class="string">&#x27;../components/Content&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&#x27;../components/Main&#x27;</span></span><br><span class="line"><span class="comment">//安装路由</span></span><br><span class="line">Vue.use(Router) ;</span><br><span class="line"><span class="comment">//配置路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">	<span class="attr">routes</span>:[</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//路由路径</span></span><br><span class="line">			<span class="attr">path</span>:<span class="string">&#x27;/content&#x27;</span>,</span><br><span class="line">			<span class="comment">//路由名称</span></span><br><span class="line">			<span class="attr">name</span>:<span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">			<span class="comment">//跳转到组件</span></span><br><span class="line">			<span class="attr">component</span>:Content</span><br><span class="line">			&#125;,&#123;</span><br><span class="line">			<span class="comment">//路由路径</span></span><br><span class="line">			<span class="attr">path</span>:<span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">			<span class="comment">//路由名称</span></span><br><span class="line">			<span class="attr">name</span>:<span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">			<span class="comment">//跳转到组件</span></span><br><span class="line">			<span class="attr">component</span>:Main</span><br><span class="line">			&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>在<code>main.js</code>中配置路由</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入上面创建的路由配置目录</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span><span class="comment">//自动扫描里面的路由配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//来关闭生产模式下给出的提示</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	<span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">	<span class="comment">//配置路由</span></span><br><span class="line">	router,</span><br><span class="line">	<span class="attr">components</span>:&#123;App&#125;,</span><br><span class="line">	<span class="attr">template</span>:<span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>在<code>App.vue</code>中使用路由</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">		&lt;!--</span><br><span class="line">			router-link：默认会被渲染成一个&lt;a&gt;标签，to属性为指定链接</span><br><span class="line">			router-view：用于渲染路由匹配到的组件</span><br><span class="line">		--&gt;</span><br><span class="line">		&lt;router-link to=&quot;/&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">		&lt;router-link to=&quot;/content&quot;&gt;内容&lt;/router-link&gt;</span><br><span class="line">		&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	export default&#123;</span><br><span class="line">		name:&#x27;App&#x27;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="十二、快速上手"><a href="#十二、快速上手" class="headerlink" title="十二、快速上手"></a>十二、快速上手</h1><p>实战并结合ElementUI组件库，带领大家掌握Vue的使用</p>
<h2 id="1-创建工程环境"><a href="#1-创建工程环境" class="headerlink" title="1. 创建工程环境"></a>1. 创建工程环境</h2><p><strong>注意：命令行都要使用管理员模式运行</strong><br>1、创建一个名为hello-vue的工程<code>vue init webpack hello-vue</code><br>2、安装依赖， 我们需要安装vue-router、element-ui、sass-loader和node-sass四个插件</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#进入工程目录</span><br><span class="line"><span class="built_in">cd</span> hello-vue</span><br><span class="line">#安装vue-routern </span><br><span class="line">npm install vue-router --save-dev</span><br><span class="line">#安装element-ui</span><br><span class="line">npm i element-ui -S</span><br><span class="line">#安装依赖</span><br><span class="line">npm install</span><br><span class="line"># 安装SASS加载器</span><br><span class="line">cnpm install sass-loader node-sass --save-dev</span><br><span class="line">#启功测试</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h2 id="2-Npm命令解释"><a href="#2-Npm命令解释" class="headerlink" title="2.  Npm命令解释"></a>2.  Npm命令解释</h2><ul>
<li><code>npm install moduleName</code>：安装模块到项目目录下</li>
<li><code>npm install -g moduleName：-g</code>：将模块安装到全局，具体安装到磁盘哪个位置要看npm config prefix的位置</li>
<li><code>npm install -save moduleName：–save</code>：将模块安装到项目目录下， 并在package文件的dependencies节点写入依赖，-S为该命令的缩写源码</li>
</ul>
<h2 id="3-创建工程"><a href="#3-创建工程" class="headerlink" title="3 创建工程"></a>3 创建工程</h2><p>目录中创建如下结构：</p>
<ul>
<li>assets：用于存放资源文件</li>
<li>components：用于存放Vue功能组件</li>
<li>views：用于存放Vue视图组件</li>
<li>router：用于存放vue-router配置</li>
</ul>
<p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624520080532/image-20210624153439412.png" alt="image-20210624153439412"></p>
<h3 id="3-1-route目录下创建工程"><a href="#3-1-route目录下创建工程" class="headerlink" title="3.1 route目录下创建工程"></a>3.1 route目录下创建工程</h3><h4 id="1-index-js"><a href="#1-index-js" class="headerlink" title="1 index.js"></a><strong>1 <code>index.js</code></strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="comment">//导入组件</span></span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&quot;../views/Main&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&quot;../views/Login&quot;</span>;</span><br><span class="line"><span class="comment">//导入子模块</span></span><br><span class="line"><span class="keyword">import</span> UserList <span class="keyword">from</span> <span class="string">&quot;../views/user/List&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> UserProfile <span class="keyword">from</span> <span class="string">&quot;../views/user/Profile&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> NotFound <span class="keyword">from</span> <span class="string">&#x27;../views/NotFound&#x27;</span></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">mode</span>:<span class="string">&quot;history&quot;</span>,</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//登录页</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: Main,</span><br><span class="line">      <span class="comment">//  写入子模块</span></span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;/user/profile/:id&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;UserProfile&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: UserProfile,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;/user/list&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;UserList&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: UserList,</span><br><span class="line">          <span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//首页</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: Login</span><br><span class="line"></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Main&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: Main</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/goHome&#x27;</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&#x27;/main&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: NotFound</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2-创建Login-vue"><a href="#2-创建Login-vue" class="headerlink" title="2 创建Login.vue"></a><strong>2 创建<code>Login.vue</code></strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-form ref=&quot;loginForm&quot; :model=&quot;form&quot; :rules=&quot;rules&quot; label-width=&quot;80px&quot; class=&quot;login-box&quot;&gt;</span><br><span class="line">      &lt;h3 class=&quot;login-title&quot;&gt;欢迎登录&lt;/h3&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;账号&quot; prop=&quot;username&quot;&gt;</span><br><span class="line">        &lt;el-input type=&quot;text&quot; placeholder=&quot;请输入账号&quot; v-model=&quot;form.username&quot;/&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;密码&quot; prop=&quot;password&quot;&gt;</span><br><span class="line">        &lt;el-input type=&quot;password&quot; placeholder=&quot;请输入密码&quot; v-model=&quot;form.password&quot;/&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; v-on:click=&quot;onsubmit(&#x27;loginForm&#x27;)&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-dialog title=&quot;温馨提示&quot; :visible.sync=&quot;dialogVisiable&quot; width=&quot;30%&quot; :before-close=&quot;handleClose&quot;&gt;</span><br><span class="line">      &lt;span&gt;请输入账号和密码&lt;/span&gt;</span><br><span class="line">      &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">          &lt;el-button type=&quot;primary&quot; @click=&quot;dialogVisible = false&quot;&gt;确定&lt;/el-button&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Login&quot;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      form:&#123;</span><br><span class="line">        username:&#x27;&#x27;,</span><br><span class="line">        password:&#x27;&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      //表单验证，需要在 el-form-item 元素中增加prop属性</span><br><span class="line">      rules:&#123;</span><br><span class="line">        username:[</span><br><span class="line">          &#123;required:true,message:&quot;账号不可为空&quot;,trigger:&quot;blur&quot;&#125;</span><br><span class="line">        ],</span><br><span class="line">        password:[</span><br><span class="line">          &#123;required:true,message:&quot;密码不可为空&quot;,tigger:&quot;blur&quot;&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      //对话框显示和隐藏</span><br><span class="line">      dialogVisible:false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    onSubmit(formName)&#123;</span><br><span class="line">      //为表单绑定验证功能</span><br><span class="line">      this.$refs[formName].validate((valid)=&gt;&#123;</span><br><span class="line">        if(valid)&#123;</span><br><span class="line">          //使用vue-router路由到指定界面，该方式称为编程式导航</span><br><span class="line">          this.$router.push(&#x27;/main&#x27;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          this.dialogVisible=true;</span><br><span class="line">          return false;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.login-box&#123;</span><br><span class="line">  border:1px solid #DCDFE6;</span><br><span class="line">  width: 350px;</span><br><span class="line">  margin:180px auto;</span><br><span class="line">  padding: 35px 35px 15px 35px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  -webkit-border-radius: 5px;</span><br><span class="line">  -moz-border-radius: 5px;</span><br><span class="line">  box-shadow: 0 0 25px #909399;</span><br><span class="line">&#125;</span><br><span class="line">.login-title&#123;</span><br><span class="line">  text-align:center;</span><br><span class="line">  margin: 0 auto 40px auto;</span><br><span class="line">  color: #303133;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-创建Main-vue"><a href="#3-创建Main-vue" class="headerlink" title="3. 创建Main.vue"></a><strong>3. 创建<code>Main.vue</code></strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">      &lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class="line">        &lt;el-menu :default-openeds=&quot;[&#x27;1&#x27;]&quot;&gt;</span><br><span class="line">          &lt;el-submenu index=&quot;1&quot;&gt;</span><br><span class="line">            &lt;template slot=&quot;title&quot;&gt;&lt;i class=&quot;el-icon-caret-right&quot;&gt;&lt;/i&gt;用户管理&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;el-menu-item index=&quot;1-1&quot;&gt;</span><br><span class="line">                &lt;!--插入的地方--&gt;</span><br><span class="line">                &lt;router-link :to=&quot;&#123;name:&#x27;UserProfile&#x27;,params:&#123;id:1&#125;&#125;&quot;&gt;个人信息&lt;/router-link&gt;</span><br><span class="line">              &lt;/el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index=&quot;1-2&quot;&gt;</span><br><span class="line">                &lt;!--插入的地方--&gt;</span><br><span class="line">                &lt;router-link :to=&quot;&#123;name:&#x27;UserList&#x27;,params: &#123;msg:&#x27;传递的参数&#x27;&#125;&#125;&quot;&gt;用户列表&lt;/router-link&gt;</span><br><span class="line">              &lt;/el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index=&quot;1-3&quot;&gt;</span><br><span class="line">                &lt;router-link to=&quot;/goHome&quot;&gt;回到首页&lt;/router-link&gt;</span><br><span class="line">              &lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-menu-item-group&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">          &lt;el-submenu index=&quot;2&quot;&gt;</span><br><span class="line">            &lt;template slot=&quot;title&quot;&gt;&lt;i class=&quot;el-icon-caret-right&quot;&gt;&lt;/i&gt;内容管理&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;el-menu-item index=&quot;2-1&quot;&gt;分类管理&lt;/el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index=&quot;2-2&quot;&gt;内容列表&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-menu-item-group&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">        &lt;/el-menu&gt;</span><br><span class="line">      &lt;/el-aside&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-container&gt;</span><br><span class="line">        &lt;el-header style=&quot;text-align: right; font-size: 12px&quot;&gt;</span><br><span class="line">          &lt;el-dropdown&gt;</span><br><span class="line">            &lt;i class=&quot;el-icon-setting&quot; style=&quot;margin-right: 15px&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;el-dropdown-menu slot=&quot;dropdown&quot;&gt;</span><br><span class="line">              &lt;el-dropdown-item&gt;个人信息&lt;/el-dropdown-item&gt;</span><br><span class="line">              &lt;el-dropdown-item&gt;退出登录&lt;/el-dropdown-item&gt;</span><br><span class="line">            &lt;/el-dropdown-menu&gt;</span><br><span class="line">          &lt;/el-dropdown&gt;</span><br><span class="line">        &lt;/el-header&gt;</span><br><span class="line">        &lt;el-main&gt;</span><br><span class="line">          &lt;!--在这里展示视图--&gt;</span><br><span class="line">          &lt;router-view /&gt;</span><br><span class="line">        &lt;/el-main&gt;</span><br><span class="line">      &lt;/el-container&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Main&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.el-header &#123;</span><br><span class="line">  background-color: #B3C0D1;</span><br><span class="line">  color: #333;</span><br><span class="line">  line-height: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.el-aside &#123;</span><br><span class="line">  color: #333;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="4-创建NotFound-vue"><a href="#4-创建NotFound-vue" class="headerlink" title="4. 创建NotFound.vue"></a><strong>4. 创建<code>NotFound.vue</code></strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;404,你的页面走丢了&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;NotFound&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-route目录下创建一个新目录user"><a href="#3-2-route目录下创建一个新目录user" class="headerlink" title="3.2 route目录下创建一个新目录user"></a>3.2 <code>route</code>目录下创建一个新目录<code>user</code></h3><p>并在<code>user</code>目录中创建两个文件</p>
<h4 id="1-创建List-vue"><a href="#1-创建List-vue" class="headerlink" title="1. 创建List.vue"></a>1. 创建<code>List.vue</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;用户列表&lt;/h1&gt;</span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props:[&#x27;msg&#x27;],</span><br><span class="line">  name: &quot;UserList&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-创建Profile-vue"><a href="#2-创建Profile-vue" class="headerlink" title="2. 创建Profile.vue"></a>2. 创建<code>Profile.vue</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;个人信息&lt;/h1&gt;</span><br><span class="line">    &#123;&#123; $route.params.id &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;UserProfile&quot;,</span><br><span class="line">  beforeRouteEnter: (to, from, next) =&gt; &#123;</span><br><span class="line">    console.log(&quot;准备进入个人信息页&quot;);</span><br><span class="line">    next(vm =&gt; &#123;</span><br><span class="line">      //进入路由之前执行getData方法</span><br><span class="line">      vm.getData()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave: (to, from, next) =&gt; &#123;</span><br><span class="line">    console.log(&quot;准备离开个人信息页&quot;);</span><br><span class="line">    next();</span><br><span class="line">  &#125;,</span><br><span class="line">  //axios</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getData: function () &#123;</span><br><span class="line">      this.axios(&#123;</span><br><span class="line">        method: &#x27;get&#x27;,</span><br><span class="line">        url: &#x27;http://localhost:8080/static/mock/data.json&#x27;</span><br><span class="line">      &#125;).then(function (response) &#123;</span><br><span class="line">        console.log(response)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-在static目录下创建mock目录并在mock目录下面创建data-json"><a href="#3-3-在static目录下创建mock目录并在mock目录下面创建data-json" class="headerlink" title="3.3 在static目录下创建mock目录并在mock目录下面创建data.json"></a>3.3 在<code>static</code>目录下创建<code>mock</code>目录并在<code>mock</code>目录下面创建<code>data.json</code></h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;狂神说Java&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://blog.kuangstudy.com&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;isNonProfit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;address&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;street&quot;</span>: <span class="string">&quot;含光门&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;陕西西安&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;country&quot;</span>: <span class="string">&quot;中国&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;links&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bilibili&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://space.bilibili.com/95256449&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;狂神说Java&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://blog.kuangstudy.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;百度&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.baidu.com/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-输入命令-npm-run-dev运行"><a href="#3-4-输入命令-npm-run-dev运行" class="headerlink" title="3.4 输入命令 npm run dev运行"></a>3.4 输入命令 <code>npm run dev</code>运行</h3><p><a href="http://localhost:8080/main">打开网址localhost:8080/main</a></p>
<p>可查看实现路由跳转、传递参数、重定向、路由模式</p>
]]></content>
      <categories>
        <category>Java框架</category>
        <category>前端框架</category>
        <category>Vue框架</category>
      </categories>
      <tags>
        <tag>java学习</tag>
        <tag>Vue</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔-2021.6.22</title>
    <url>/archives/c116b4d3.html</url>
    <content><![CDATA[<p><strong><a href="https://www.cnblogs.com/Merak21/articles/14884478.html">无论什么工具，花了多少心思配置折腾，都比不上安心读文章学习，做笔记总结，写一些感悟。再华丽的方式都比不上一篇篇积累自身心路历程的文章，这段时间需要大量学习，开始自己的新阶段。</a></strong></p>
<p>今天配置图床时，在博客园中看到了上面的话，很有点醒作用。</p>
<p><strong>不要沉醉于形式主义的束缚，实用主义才是正途。</strong></p>
<span id="more"></span>

<hr>
<h3 id="书籍感悟"><a href="#书籍感悟" class="headerlink" title="书籍感悟"></a>书籍感悟</h3><p>看《毛选》  <!--摘录--></p>
<blockquote>
<p>谁是我们的敌人？谁是我们的朋友？这个问题是革命的首要问题。</p>
</blockquote>
<hr>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p><strong>践行其中的第17条</strong></p>
<p>什么是无意义的事情：</p>
<ul>
<li>每天无所事事，没有学习到东西</li>
<li>玩的时间过长</li>
</ul>
<p>突然想到《穷查理宝典》中的经典语录</p>
<ol>
<li><p>凡事往简单处想 , 往认真处行。</p>
</li>
<li><p>我们老得太快 , 聪明得太迟。</p>
</li>
<li><p>节俭是责任的仆人。</p>
</li>
<li><p>如果你想要说服别人 , 要诉诸利益 , 而诉诸理性。</p>
</li>
<li><p>要朝前想、往后看 —— 反过来想，总是反过来想。</p>
</li>
<li><p><strong>直面你的大问题</strong>，别把它们藏起来。</p>
</li>
<li><p>享受结果，也享受过程，因为你<strong>活在过程</strong>当中。</p>
</li>
<li><p>比求胜的意愿更重要的是<strong>做好准备</strong>的意愿。</p>
</li>
<li><p>在手里拿着铁锤的人看来 , 世界就像一颗钉子。这是处理问题的一种笨办法。</p>
</li>
<li><p>唯一的获胜方法是不断工作，并希望拥有一点<strong>洞察力</strong>。</p>
</li>
<li><p>如果你真的想要在某个领域做得很出色，那么你必须对它有强烈的<strong>兴趣</strong>。</p>
</li>
<li><p>如果你想要变得聪明，你必须不停追问的问题是“<strong>为什么</strong>”。</p>
</li>
<li><p>承认自己的无知是智慧的开端，只在自己明确界定的能力圈内行事。</p>
</li>
<li><p>我这辈子遇到的聪明人没有不<strong>每天阅读</strong>的一没有 , 一个都没有。</p>
</li>
<li><p><strong>声誉和正直</strong>是你最有价值的财产，而且能够在瞬间化为乌 有。</p>
</li>
<li><p><strong>耐心</strong>，克制人类天生爱行动的偏好。避免多余的交易和摩擦成本，永远别为了行动而行动。</p>
</li>
<li><p>主人公有一句口头禅：“要是知道我会死在哪里就好啦，那我将永远不去那个地方。”</p>
</li>
<li><p><strong>认识和适应你身边的世界的真实本质</strong>，别指望它来适应你。不断地挑战和主动地修正你“最爱的观念”。正视现实，即使你并不喜欢它 —— 尤其当你不喜欢它的时候。</p>
</li>
<li><p><strong>最好的用途总是由次好的用途衡量出来的</strong>。好主意特别少，当时机对你有利时，狠狠地下赌注吧。</p>
</li>
<li><p>获得智慧是一种道德责任，为此你必须坚持终身学习。因为光靠已有的知识，你在生活中走不了多远。唯有像巴菲特他们一样，“每天夜里睡觉时都比那天早晨聪明一点点”，才能使人满意。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>感想</tag>
        <tag>书籍摘录</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的优化</title>
    <url>/archives/1253b4af.html</url>
    <content><![CDATA[<ol>
<li><p>关于侧边栏图像这一块的圆角问题</p>
</li>
<li><p>关于网站底部 <code>总访问量</code>、<code>总访问人数</code> 问题</p>
<p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624335910238/image-20210622092740967.png" alt="image-20210622092740967"></p>
</li>
<li><p>github中的标签问题</p>
</li>
<li><p>豆瓣中的书籍问题</p>
</li>
<li><p>分类模块</p>
</li>
<li><p>置顶的显示问题</p>
</li>
<li><p><del>图床问题</del></p>
</li>
</ol>
  <span id="more"></span>



<h1 id="7-图床问题"><a href="#7-图床问题" class="headerlink" title="7 图床问题"></a>7 图床问题</h1><p>通过github，picgo的方式，无法成功，图片上传不上去，只成功一次</p>
<p>有方法通过cdn的方式实现，了解不深，且寻找的解决办法不能使我访问</p>
<h2 id="7-1-步骤如下"><a href="#7-1-步骤如下" class="headerlink" title="7.1 步骤如下"></a>7.1 步骤如下</h2><p>故转而通过gitee的方式实现图床的功能，通过自定义的插件实现该功能</p>
<p>参考：<a href="https://gitee.com/pangyuworld/typora-upload-plugin">一款为实现Typora使用gitee作为图床的java版本插件</a></p>
<blockquote>
<p>需要的环境和配置</p>
</blockquote>
<ul>
<li>Java环境</li>
<li>typaro软件</li>
<li>maven</li>
<li>idea</li>
</ul>
<ol>
<li><p>登录gitee并创建一个公开仓库</p>
</li>
<li><p>申请access_token<a href="https://gitee.com/profile/personal_access_tokens">gitee生成accessToken</a></p>
</li>
<li><p>下载该仓库源码</p>
</li>
<li><p>配置<code>com.pang.Config</code>，其配置参考注释</p>
</li>
<li><p>在源码根目录使用<code>maven:package</code>指令进行编译,编译生成的java文件为<code>./target/typora-custom-script-1.0-SNAPSHOT-jar-with-dependencies.jar</code></p>
<p><strong>其中maven:package  最好到IDE中到该文件的根目录</strong></p>
<p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624337030127/image-20210622124348718.png" alt="image-20210622124348718"></p>
<p><strong>右键点击生成的Jar包，得到生成的Jar包文件路径</strong></p>
<p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624337446284/image-20210622124601992.png" alt="image-20210622124601992"></p>
</li>
<li><p>打开Typora进行配置</p>
<ol>
<li><p>选择<code>偏好设置-&gt;图像-&gt;上传服务</code></p>
</li>
<li><p>选择<code>Custom Command</code></p>
</li>
<li><p>编辑自定义命令,指令如下<code>java -jar 生成的typora-custom-script-1.0-SNAPSHOT-jar-with-dependencies.jar的绝对路径</code>，例如<code>java -jar /home/pang/project/typora-custom-script/target/typora-custom-script-1.0-SNAPSHOT-jar-with-dependencies.jar</code></p>
<p><img src="https://gitee.com/alexandermucc/img/raw/master/img/1624337300008/image-20210622124818775.png" alt="image-20210622124818775"></p>
</li>
<li><p>点击<code>验证图片上传选项</code>，即可得到结果</p>
<img src="https://gitee.com/alexandermucc/img/raw/master/img/1624337367280/image-20210622124926150.png" alt="image-20210622124926150" style="zoom:50%;" /></li>
<li><p>点击<code>插入图片时..</code>后面的下拉框，选择<code>上传图片</code>即可配置完成</p>
</li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Java基础之类与对象</title>
    <url>/archives/11f64e53.html</url>
    <content><![CDATA[<h1 id="Java基础之类与对象"><a href="#Java基础之类与对象" class="headerlink" title="Java基础之类与对象"></a>Java基础之类与对象</h1><span id="more"></span>

<h1 id="一、OOP思想"><a href="#一、OOP思想" class="headerlink" title="一、OOP思想"></a>一、OOP思想</h1><p>数据第一，其次是算法</p>
<h2 id="1-类"><a href="#1-类" class="headerlink" title="1 类"></a>1 类</h2><h3 id="1-1-两大的特性"><a href="#1-1-两大的特性" class="headerlink" title="1.1 两大的特性"></a>1.1 两大的<strong>特性</strong></h3><p><strong>封装【最重要】</strong>、继承</p>
<hr>
<p><strong>封装</strong>：实例字段不能别外界修改，只能通过方法调用。</p>
<p><strong>好处</strong>：数据更加安全</p>
<hr>
<p><strong>继承</strong></p>
<hr>
<h3 id="1-2-类中的组成"><a href="#1-2-类中的组成" class="headerlink" title="1.2 类中的组成"></a>1.2 类中的组成</h3><p><strong>实例字段、方法、状态</strong></p>
<hr>
<p>实例字段：类中的变量。对象中的数据。</p>
<p>获取实例字段的值一般需要三项内容：私有数据字段、公共字段访问器方法和更改器方法即Getter和Setter方法</p>
<p>方法：操作数据的过程</p>
<p>状态：特定实例对象实例字段的集合。通俗来说类中变量所赋的值。</p>
<hr>
<h2 id="2-对象"><a href="#2-对象" class="headerlink" title="2 对象"></a>2 对象</h2><h3 id="三大特征"><a href="#三大特征" class="headerlink" title="三大特征"></a><strong>三大特征</strong></h3><p><strong>对象的行为</strong>：对象完成的操作。即对象的方法</p>
<p><strong>对象的状态</strong>：每个对象保存描述当前状况的信息。即调用方法，如何响应</p>
<p><strong>对象的标识</strong>：区分相同行为不同状态的对象。举例人与人之间肯定存在着差异。</p>
<h2 id="3-类之间的关系"><a href="#3-类之间的关系" class="headerlink" title="3 类之间的关系"></a>3 类之间的关系</h2><h4 id="依赖-uses-a"><a href="#依赖-uses-a" class="headerlink" title="依赖 uses-a"></a><strong>依赖 uses-a</strong></h4><p>​    一个类的方法使用或操纵另一个类的对象。</p>
<p>​    即一个类的方法需要使用另一个类的信息。举例，订单中需要客户的信用情况等，而商品则无需客户的信息。所以来说<code>订单类依赖客户类</code>。</p>
<p>​    <strong>需要降低依赖关系，避免耦合</strong></p>
<h4 id="聚合-has-a"><a href="#聚合-has-a" class="headerlink" title="聚合 has-a"></a><strong>聚合 has-a</strong></h4><p>包含关系。</p>
<h4 id="继承-is-a"><a href="#继承-is-a" class="headerlink" title="继承 is-a"></a><strong>继承 is-a</strong></h4><h1 id="二、预定义类"><a href="#二、预定义类" class="headerlink" title="二、预定义类"></a>二、预定义类</h1><h2 id="1-对象和对象变量"><a href="#1-对象和对象变量" class="headerlink" title="1 对象和对象变量"></a>1 对象和对象变量</h2><p><strong>对象</strong>通过一般通过构造器创建，但也可以通过<code>静态工厂方法-类调用静态方法</code>创建。构造器好比一个容器，对象好比容器中的物体。</p>
<p><strong>对象变量</strong>是对对象的==<strong>引用</strong>==。算是起别名的意思，类比成人，每个人都有名字。</p>
<h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p> 与类同名</p>
<p>构造器可以有多个</p>
<p>参数至少0个</p>
<p>没有返回值</p>
<p>和new操作符一起使用</p>
<p>在所有方法中不要使用与实例字段同名的变量</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>更改器方法和访问器方法</p>
<p>更改器方法会改变对象的状态</p>
<p>访问器方法只能访问对象不能修改对象</p>
<h2 id="更改器方法和访问器方法"><a href="#更改器方法和访问器方法" class="headerlink" title="更改器方法和访问器方法"></a>更改器方法和访问器方法</h2><p>好比Getter和Setter方法</p>
<p><strong>更改器方法</strong>：对象的状态会发生变化</p>
<p><strong>访问器方法</strong>：只访问对象而不修改对象的方法</p>
<h1 id="三、自定义类"><a href="#三、自定义类" class="headerlink" title="三、自定义类"></a>三、自定义类</h1><p><strong>文件名必须与public类相匹配</strong></p>
<p><strong>一个源文件中只能有一个public类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-null引用"><a href="#1-null引用" class="headerlink" title="1 null引用"></a>1 null引用</h2><p>引用数据类型会出现空指针异常</p>
<p>基本数据类型则不会出现该异常</p>
<h2 id="2-显示参数和隐式参数"><a href="#2-显示参数和隐式参数" class="headerlink" title="2 显示参数和隐式参数"></a>2 显示参数和隐式参数</h2><p>显示参数：在方法中声明</p>
<p>隐式参数：未在方法中声明。一般用this指示隐式参数用于区分显示参数</p>
<h2 id="3-基于类的权限访问"><a href="#3-基于类的权限访问" class="headerlink" title="3 基于类的权限访问"></a>3 基于类的权限访问</h2><p>该类的方法可以访问<u>所属类</u>的<u>所有对象</u>的<u>私有数据</u>。可以理解为方法能访问所有的实例字段</p>
<h2 id="4-final实例字段"><a href="#4-final实例字段" class="headerlink" title="4 final实例字段"></a>4 final实例字段</h2><p>final关键字修饰的字段为不可变字段。但对于String类中，还是可以改变</p>
<h2 id="5-static修饰的字段和方法"><a href="#5-static修饰的字段和方法" class="headerlink" title="5 static修饰的字段和方法"></a>5 static修饰的字段和方法</h2><p><strong>被static修饰的方法和字段，属于类而不属于任何单个对象</strong></p>
<hr>
<p><strong>静态字段</strong>也被成为类字段</p>
<p>若没有显示赋初值，则每次加载类时都会初始化为默认值<code>0,false,null</code></p>
<hr>
<p><strong>静态常量</strong></p>
<p><strong>静态方法</strong></p>
<ul>
<li>只能访问静态字段</li>
<li>不需要访问对象的状态</li>
</ul>
<hr>
<h2 id="6-方法参数"><a href="#6-方法参数" class="headerlink" title="6 方法参数"></a>6 方法参数</h2><p>==<strong>Java中总是采用按值调用</strong>==，方法得到的是所有参数的一个副本。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 1. 数字参数不能改变</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">double</span> percent = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before&quot;</span> + percent);</span><br><span class="line">        tripleValue(percent);</span><br><span class="line">        System.out.println(<span class="string">&quot;After&quot;</span> + percent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *  对象参数的状态</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Employee harry = <span class="keyword">new</span> Employee(<span class="string">&quot;Harry&quot;</span>, <span class="number">50000</span>);</span><br><span class="line">        tripleSalary(harry);</span><br><span class="line">        System.out.println(harry.getSalary());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *  交换对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        Employee a = <span class="keyword">new</span> Employee(<span class="string">&quot;A&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        Employee b = <span class="keyword">new</span> Employee(<span class="string">&quot;B&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        swap(a,b);</span><br><span class="line">        System.out.println(a.getName());</span><br><span class="line">        System.out.println(b.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 交换</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">        harry = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = harry;</span><br><span class="line">        System.out.println(a.getName());</span><br><span class="line">        System.out.println(b.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tripleValue</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">        x *= <span class="number">3</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;End of method&quot;</span> + x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tripleSalary</span><span class="params">(Employee x)</span></span>&#123;</span><br><span class="line">        x.raiseSalary(<span class="number">200</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;End of method&quot;</span> + x.getSalary());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Employee x , Employee y)</span></span>&#123;</span><br><span class="line">        Employee temp = x;</span><br><span class="line">        x = y;</span><br><span class="line">        y = temp;</span><br><span class="line">        System.out.println(<span class="string">&quot;End of method&quot;</span> + x.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;End of method&quot;</span> + y.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> raise = salary * byPercent / <span class="number">100</span>;</span><br><span class="line">        salary += raise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Before10<span class="number">.0</span></span><br><span class="line">End of method30<span class="number">.0</span></span><br><span class="line">After10<span class="number">.0</span></span><br><span class="line">End of method150000<span class="number">.0</span></span><br><span class="line"><span class="number">150000.0</span></span><br><span class="line">End of methodB</span><br><span class="line">End of methodA</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">--------</span><br><span class="line">B</span><br><span class="line">A</span><br></pre></td></tr></table></figure>



<hr>
<p><strong>小结</strong></p>
<ul>
<li>方法不能修改基本数据类型的参数</li>
<li>方法可以改变对象参数的状态</li>
<li>方法不能让一个对象参数引用一个新的对象</li>
</ul>
<hr>
<h1 id="四、对象构造"><a href="#四、对象构造" class="headerlink" title="四、对象构造"></a>四、对象构造</h1><p>对象构造：定义对象的初始化状态</p>
<h2 id="1-重载"><a href="#1-重载" class="headerlink" title="1 重载"></a>1 重载</h2><p>重载：同名不同参数的方法</p>
<p>重载解析：查找匹配重载中的方法</p>
<h2 id="2-默认字段初始化"><a href="#2-默认字段初始化" class="headerlink" title="2 默认字段初始化"></a>2 默认字段初始化</h2><p>构造器没有显示设置初值，则会自动赋为默认值。</p>
<p>数值为0，布尔型为false，对象引用为null。</p>
<p><strong>不赋初值影响可读性</strong></p>
<p>字段和局部变量的区别</p>
<ul>
<li>字段可以不用初始化</li>
<li>方法中的局部变量必须初始化</li>
</ul>
<h2 id="3-无参构造器"><a href="#3-无参构造器" class="headerlink" title="3 无参构造器"></a>3 无参构造器</h2><p>类默认自带一个无参构造器，会对所属类的实例字段赋默认值</p>
<p><strong>当有一个有参构造器时，若想无参构造器，则必须提供一个无参构造器</strong></p>
<h2 id="4-显示字段初始化"><a href="#4-显示字段初始化" class="headerlink" title="4 显示字段初始化"></a>4 显示字段初始化</h2><p>避免发生空指针异常</p>
<p>创建类就给所属类的实例字段赋初值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name = <span class="string">&quot;&quot;</span>;</span><br><span class="line"> 	<span class="keyword">private</span> <span class="keyword">double</span> salary = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextId;</span><br><span class="line"> 	<span class="keyword">private</span> <span class="keyword">int</span> id = assignId();</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">assignId</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = nextId;</span><br><span class="line">    nextId++;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-参数名"><a href="#5-参数名" class="headerlink" title="5 参数名"></a>5 参数名</h2><p>参数名尽量避免简单，需要和实例字段具有区分性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String aName, <span class="keyword">double</span> aSalary)</span></span>&#123;</span><br><span class="line">  name = aName;</span><br><span class="line">  salary = aSalary;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String aName, <span class="keyword">double</span> aSalary)</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-关键字this"><a href="#6-关键字this" class="headerlink" title="6 关键字this"></a>6 关键字this</h2><p>另外有一个一个参数构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">double</span> aSalary)</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(<span class="string">&quot;Employee #&quot;</span>+nextId,aSalary);</span><br><span class="line">  nextId++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-初始化块"><a href="#7-初始化块" class="headerlink" title="7 初始化块"></a>7 初始化块</h2><p><strong>初始化数据字段的方法</strong></p>
<ul>
<li>构造器中设置</li>
<li>声明中赋值</li>
<li>初始化块赋值</li>
</ul>
<p>首先运行初始化块，初始化块中首先运行静态代码块，静态代码块一共只会执行一次。</p>
<p>然后运行构造器主体部分</p>
<hr>
<p><strong>调用构造器的过程</strong></p>
<pre><code>1. 构造器**第一行**调用另一个构造器，则执行另一个构造器
2. 否则，数据字段初始化为默认值`0,false,null`，按照类声明顺序，执行所有字段初始化方法和初始化块。
3. 执行构造器的主体
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Employee&gt; staffs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Employee staff1 = <span class="keyword">new</span> Employee(<span class="string">&quot;Harry&quot;</span>,<span class="number">4000</span>);</span><br><span class="line">        Employee staff2 = <span class="keyword">new</span> Employee(<span class="number">4000</span>);</span><br><span class="line">        Employee staff3 = <span class="keyword">new</span> Employee();</span><br><span class="line">        staffs.add(staff1);</span><br><span class="line">        staffs.add(staff2);</span><br><span class="line">        staffs.add(staff3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Employee staff : staffs) &#123;</span><br><span class="line">            System.out.println(staff);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextId;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        nextId = <span class="keyword">new</span> Random().nextInt(<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对象初始化块</span></span><br><span class="line">    &#123;</span><br><span class="line">        id = nextId;</span><br><span class="line">        nextId++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String aName,<span class="keyword">double</span> aSalary)</span></span>&#123;</span><br><span class="line">        name = aName;</span><br><span class="line">        salary = aSalary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">double</span> salary)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">&quot;Employee #&quot;</span> + nextId , salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, salary=&quot;</span> + salary +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="五、包"><a href="#五、包" class="headerlink" title="五、包"></a>五、包</h1><p>包用来处理类重名问题</p>
<p>包名写法：域名倒序 <code>com.alexandermucc.类名</code></p>
<h2 id="1-类的导入"><a href="#1-类的导入" class="headerlink" title="1 类的导入"></a>1 类的导入</h2><p>完全限定名</p>
<p><code>import</code>导入</p>
<p>==<strong>只能使用星号(*)导入一个包，而不能导入<code>import java.*</code>,<code>import java.*.*</code>所有的包</strong>==</p>
<h2 id="2-静态导入"><a href="#2-静态导入" class="headerlink" title="2 静态导入"></a>2 静态导入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.*</span><br><span class="line"></span><br><span class="line">out.println(<span class="string">&quot;Goodbye,World&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="3-类路径"><a href="#3-类路径" class="headerlink" title="3 类路径"></a>3 类路径</h2><p>类路径：所有包含类文件的集合</p>
<hr>
<p><strong>类能被多个程序共享，需要</strong></p>
<ol>
<li>类文件放在一个目录中</li>
<li>JAR文件放在一个目录中</li>
<li>设置类路径</li>
</ol>
<hr>
<p><strong>类路径包括</strong></p>
<ul>
<li>基目录</li>
<li>当前目录</li>
<li>JAR文件</li>
</ul>
<hr>
<p><strong>设置类路径</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -classpath /home/user/classdir:.:/home/user/archives/archive.jar MyProg</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="六、-文档注释"><a href="#六、-文档注释" class="headerlink" title="六、 文档注释"></a>六、 文档注释</h1><h2 id="1-类注释"><a href="#1-类注释" class="headerlink" title="1 类注释"></a>1 类注释</h2><p>必须放在import之后 类定义之前</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  	*</span></span><br><span class="line"><span class="comment">  	*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Card</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-方法注释"><a href="#2-方法注释" class="headerlink" title="2 方法注释"></a>2 方法注释</h2><p>必须放在所描述的方法之前</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> aName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> aSalary</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String aName,<span class="keyword">double</span> aSalary)</span></span>&#123;</span><br><span class="line">    name = aName;</span><br><span class="line">    salary = aSalary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="七、类设计技巧"><a href="#七、类设计技巧" class="headerlink" title="七、类设计技巧"></a>七、类设计技巧</h1><ul>
<li><p><strong>1 保证数据私有</strong></p>
<p><strong>绝对不要破坏封装性</strong></p>
</li>
<li><p><strong>2 一定要对数据进行初始化</strong></p>
</li>
<li><p><strong>3 不要在类中使用过多的基本类型</strong></p>
</li>
<li><p><strong>用其他类代替基本类型，使代码容易理解</strong></p>
</li>
<li><p><strong>4 不是所有的字段都需要单独的字段访问器和字段更改器</strong></p>
</li>
<li><p><strong>5 分解有过多职责的类</strong></p>
</li>
<li><p><strong>6 类名和方法名要能体现他们的职责</strong></p>
</li>
<li><p><strong>7 优先使用不可变的类</strong></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Java基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>技术学习方法</title>
    <url>/archives/9a1b163b.html</url>
    <content><![CDATA[<h2 id="学习新技术的方法"><a href="#学习新技术的方法" class="headerlink" title="学习新技术的方法"></a>学习新技术的方法</h2><p>学习新技术的几个步骤</p>
<p>写博客时注意培养框架思想。<strong>大局思维导图、细节写博客</strong></p>
<span id="more"></span>

<h3 id="一、-认识和了解"><a href="#一、-认识和了解" class="headerlink" title="一、 认识和了解"></a>一、 认识和了解</h3><p><strong>1. 百科定义</strong>：了解该技术是什么<br><strong>2. 解决什么问题</strong>：<br><strong>3. 同类技术有哪些</strong>：<br><strong>4. 技术的组成部分</strong>：<br><strong>5. 为什么这个技术会出现</strong></p>
<h3 id="二、-学语法学用法"><a href="#二、-学语法学用法" class="headerlink" title="二、 学语法学用法"></a>二、 学语法学用法</h3><p><strong>多思考、多提炼、多总结、写博客</strong></p>
<p>**上手比较容易 **</p>
<ol>
<li>视频教程<blockquote>
<p>阿里云、腾迅课堂、bilibili</p>
</blockquote>
</li>
<li>快速上手视频<blockquote>
<p>看官网的快速入门文档、简单搭建的视频同上面</p>
</blockquote>
</li>
<li>入门博客<blockquote>
<p>CSDN、博客园、简书等</p>
</blockquote>
</li>
</ol>
<p>**比较系统了解 **</p>
<ol>
<li>基础技术类：看权威的书籍、经典的书籍</li>
<li>框架类：看官方文档</li>
</ol>
<h3 id="三、练习"><a href="#三、练习" class="headerlink" title="三、练习"></a>三、练习</h3><ol>
<li>局部练习、小型实战、搭建环境</li>
<li>遇到的坑及时记录、写博客</li>
</ol>
<h3 id="四、造轮子"><a href="#四、造轮子" class="headerlink" title="四、造轮子"></a>四、造轮子</h3><p>上手实际开源项目</p>
<blockquote>
<p>github、gitee等</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>觉醒年代</title>
    <url>/archives/a3c72645.html</url>
    <content><![CDATA[<p>觉醒年代</p>
<span id="more"></span>

<h3 id="李大钊："><a href="#李大钊：" class="headerlink" title="李大钊："></a>李大钊：</h3><p>英雄淘尽大江流，歌舞依然上画楼。一代声华空醉梦，十年潦倒剩穷愁。竹帘半卷江天雨，蕉扇初迎海外秋。忆到万山无语处，只应共泛五湖舟</p>
<h3 id="蔡元培校长办学理念"><a href="#蔡元培校长办学理念" class="headerlink" title="蔡元培校长办学理念"></a>蔡元培校长办学理念</h3><p>各位，五年前严复先生为北大校长时，我服务于教育部，做教育总长。记得北大开学的那天，我为本校做了一点贡献。诸君多自预科毕业而来，想必也知道，<strong>士别三日当刮目相看</strong>，何况时日已过去数年，诸君与往昔相比，一定有了长足的进步。我今天就要服务于北大，我有三件事要告诉诸君：</p>
<p>一、<strong>抱定宗旨</strong>。诸君来此求学，必有一定宗旨，须知宗旨，正大与否，必先知大学之性质。<strong>大学者，研究高深学问之者也</strong>。现在外面常常有人指责北大之腐败，是因为来此求学者，都抱有当官发财的思想，以此为捷径。因为一心要做官，一心想发财，所以，从不问教员之学问深浅，唯问教员官职的大小，官阶大的，就特别受欢迎，这大概是为了方便毕业时有人提携吧。我想说的是，诸君来北大求学，三年或四年，时间不谓不多，<strong>如能爱惜光阴，孜孜求学，则其造诣定然会很高、很深</strong>。诸君来北大求学的宗旨是做官发财，那这个宗旨就错了，求学的路，就必然走偏了。<u>平时冶游，考试来了，才去翻读讲义，不问学问之有无，唯争分数之多寡；考试结束，书籍，束之高阁，毫不过问，潦草塞责；文凭到手，即可以此活动于社会，光阴虚度，学问毫无</u>。这是自误啊，这与到北大求学的真正宗旨，是大相背驰的。大家也许还记得，发生不久的辛亥革命，我们之所以要革命，就是因为清朝政府太腐败，就是现在也有许多人，对现状不满意，也是因为社会道德沦丧。<u>诸君在这个时候，如果不打好基础，勤奋求学，万一为生计所迫，做了教员，则一定会耽误学生哪；你进入政界，则一定会耽误国家呀，这是耽误别人，误人误己</u>。所以，<strong>宗旨不可以不正大</strong>，这是我希望于诸君者之一。</p>
<p>二、<strong>砥砺德行</strong>。如今的社会风气啊，越来越苟且敷衍，只顾眼前，道德伦丧、败坏德行的事情，触目皆是，不是德行根基牢固的人，少有不被这种社会风气所污染。各位，国家的兴衰，要看社会风气是高尚还是低劣，如果都流行于这种社会风气，前途不堪设想，所以<strong>要有卓越之人，以身作则，尽力去矫正这种颓废的社会风气</strong>。诸君皆为大学学生，地位甚高，肩此重任，责无旁贷。如果德不修、学不讲，还与这种颓废的社会风气同流合污，那亦是侮辱自己，更何谈，做他人的榜样呢？所以，<strong>品行不可以不严谨对待和修养</strong>，这是我希望于诸君者之二。</p>
<p>三、<strong>尊敬师友、坦诚相见、开诚布公、相互勉励</strong>。各位，我们同处北大，要荣辱与共啊。我相信，我们北大一定会是出文化大家、思想大家的地方。</p>
<p><strong>蔡老的话到今天也有点醒之作用，醍醐灌顶，如坐针毡。</strong></p>
<ul>
<li><p>抱定宗旨，爱惜光阴，孜孜求学才不会误人误己</p>
</li>
<li><p>砥砺德行，以身作则</p>
</li>
</ul>
<h1 id="辜鸿铭"><a href="#辜鸿铭" class="headerlink" title="辜鸿铭"></a>辜鸿铭</h1><p>什么是中国人：有着赤子之心，成人之思，过着心灵生活的人</p>
]]></content>
      <tags>
        <tag>影视</tag>
        <tag>熏陶</tag>
      </tags>
  </entry>
</search>
